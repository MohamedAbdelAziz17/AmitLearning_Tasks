
avr_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001880  00001914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800068  00800068  0000191c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ccd  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000126a  00000000  00000000  00004a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a9b  00000000  00000000  00005cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  00007754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000117b  00000000  00000000  0000814c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001875  00000000  00000000  000092c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_1>
       8:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_2>
       c:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_3>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_5>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__vector_9>
      28:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_10>
      2c:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__vector_11>
      30:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_12>
      34:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <main+0x40>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 e8       	ldi	r30, 0x80	; 128
      ea:	f8 e1       	ldi	r31, 0x18	; 24
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a8 36       	cpi	r26, 0x68	; 104
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a8 e6       	ldi	r26, 0x68	; 104
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a4 3a       	cpi	r26, 0xA4	; 164
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 48 04 	call	0x890	; 0x890 <main>
     10c:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <MCAL_ADC_Init>:
		else{
		Local_Error=ERROR;
		}

		return Local_Error;
}
     114:	fc 01       	movw	r30, r24
     116:	80 81       	ld	r24, Z
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	39 f0       	breq	.+14     	; 0x12a <MCAL_ADC_Init+0x16>
     11c:	18 f0       	brcs	.+6      	; 0x124 <MCAL_ADC_Init+0x10>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	39 f0       	breq	.+14     	; 0x130 <MCAL_ADC_Init+0x1c>
     122:	33 c0       	rjmp	.+102    	; 0x18a <MCAL_ADC_Init+0x76>
     124:	3e 98       	cbi	0x07, 6	; 7
     126:	3f 98       	cbi	0x07, 7	; 7
     128:	34 c0       	rjmp	.+104    	; 0x192 <MCAL_ADC_Init+0x7e>
     12a:	3e 9a       	sbi	0x07, 6	; 7
     12c:	3f 98       	cbi	0x07, 7	; 7
     12e:	31 c0       	rjmp	.+98     	; 0x192 <MCAL_ADC_Init+0x7e>
     130:	3e 9a       	sbi	0x07, 6	; 7
     132:	3f 9a       	sbi	0x07, 7	; 7
     134:	2e c0       	rjmp	.+92     	; 0x192 <MCAL_ADC_Init+0x7e>
     136:	33 9a       	sbi	0x06, 3	; 6
     138:	8f b7       	in	r24, 0x3f	; 63
     13a:	80 68       	ori	r24, 0x80	; 128
     13c:	8f bf       	out	0x3f, r24	; 63
     13e:	2f c0       	rjmp	.+94     	; 0x19e <MCAL_ADC_Init+0x8a>
     140:	33 98       	cbi	0x06, 3	; 6
     142:	2d c0       	rjmp	.+90     	; 0x19e <MCAL_ADC_Init+0x8a>
     144:	35 98       	cbi	0x06, 5	; 6
     146:	37 c0       	rjmp	.+110    	; 0x1b6 <MCAL_ADC_Init+0xa2>
     148:	80 b7       	in	r24, 0x30	; 48
     14a:	8f 77       	andi	r24, 0x7F	; 127
     14c:	80 bf       	out	0x30, r24	; 48
     14e:	80 b7       	in	r24, 0x30	; 48
     150:	8f 7b       	andi	r24, 0xBF	; 191
     152:	80 bf       	out	0x30, r24	; 48
     154:	80 b7       	in	r24, 0x30	; 48
     156:	8f 7d       	andi	r24, 0xDF	; 223
     158:	80 bf       	out	0x30, r24	; 48
     15a:	35 9a       	sbi	0x06, 5	; 6
     15c:	2c c0       	rjmp	.+88     	; 0x1b6 <MCAL_ADC_Init+0xa2>
     15e:	80 b7       	in	r24, 0x30	; 48
     160:	8f 77       	andi	r24, 0x7F	; 127
     162:	80 bf       	out	0x30, r24	; 48
     164:	80 b7       	in	r24, 0x30	; 48
     166:	80 64       	ori	r24, 0x40	; 64
     168:	80 bf       	out	0x30, r24	; 48
     16a:	80 b7       	in	r24, 0x30	; 48
     16c:	8f 7d       	andi	r24, 0xDF	; 223
     16e:	80 bf       	out	0x30, r24	; 48
     170:	35 9a       	sbi	0x06, 5	; 6
     172:	21 c0       	rjmp	.+66     	; 0x1b6 <MCAL_ADC_Init+0xa2>
     174:	80 b7       	in	r24, 0x30	; 48
     176:	80 68       	ori	r24, 0x80	; 128
     178:	80 bf       	out	0x30, r24	; 48
     17a:	80 b7       	in	r24, 0x30	; 48
     17c:	8f 7b       	andi	r24, 0xBF	; 191
     17e:	80 bf       	out	0x30, r24	; 48
     180:	80 b7       	in	r24, 0x30	; 48
     182:	8f 7d       	andi	r24, 0xDF	; 223
     184:	80 bf       	out	0x30, r24	; 48
     186:	35 9a       	sbi	0x06, 5	; 6
     188:	16 c0       	rjmp	.+44     	; 0x1b6 <MCAL_ADC_Init+0xa2>
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 95       	ret
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	08 95       	ret
     192:	81 81       	ldd	r24, Z+1	; 0x01
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	79 f2       	breq	.-98     	; 0x136 <MCAL_ADC_Init+0x22>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	91 f2       	breq	.-92     	; 0x140 <MCAL_ADC_Init+0x2c>
     19c:	f8 cf       	rjmp	.-16     	; 0x18e <MCAL_ADC_Init+0x7a>
     19e:	82 81       	ldd	r24, Z+2	; 0x02
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	e9 f2       	breq	.-70     	; 0x15e <MCAL_ADC_Init+0x4a>
     1a4:	18 f4       	brcc	.+6      	; 0x1ac <MCAL_ADC_Init+0x98>
     1a6:	88 23       	and	r24, r24
     1a8:	79 f2       	breq	.-98     	; 0x148 <MCAL_ADC_Init+0x34>
     1aa:	ef cf       	rjmp	.-34     	; 0x18a <MCAL_ADC_Init+0x76>
     1ac:	84 30       	cpi	r24, 0x04	; 4
     1ae:	11 f3       	breq	.-60     	; 0x174 <MCAL_ADC_Init+0x60>
     1b0:	88 30       	cpi	r24, 0x08	; 8
     1b2:	41 f2       	breq	.-112    	; 0x144 <MCAL_ADC_Init+0x30>
     1b4:	ea cf       	rjmp	.-44     	; 0x18a <MCAL_ADC_Init+0x76>
     1b6:	37 9a       	sbi	0x06, 7	; 6
     1b8:	3d 9a       	sbi	0x07, 5	; 7
     1ba:	86 b1       	in	r24, 0x06	; 6
     1bc:	88 7f       	andi	r24, 0xF8	; 248
     1be:	93 81       	ldd	r25, Z+3	; 0x03
     1c0:	89 2b       	or	r24, r25
     1c2:	86 b9       	out	0x06, r24	; 6
     1c4:	84 81       	ldd	r24, Z+4	; 0x04
     1c6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
     1ca:	33 9a       	sbi	0x06, 3	; 6
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	08 95       	ret

000001d0 <MCAL_ADC_StartConversionBusyWait>:
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	c8 2f       	mov	r28, r24
     1d8:	8b 01       	movw	r16, r22
     1da:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <g_u8ADC_Channel>
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	68 2f       	mov	r22, r24
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 65 01 	call	0x2ca	; 0x2ca <MCAL_DIO_voidSetPinDirection>
     1e8:	97 b1       	in	r25, 0x07	; 7
     1ea:	90 7e       	andi	r25, 0xE0	; 224
     1ec:	8c 2f       	mov	r24, r28
     1ee:	89 2b       	or	r24, r25
     1f0:	87 b9       	out	0x07, r24	; 7
     1f2:	36 9a       	sbi	0x06, 6	; 6
     1f4:	8f e3       	ldi	r24, 0x3F	; 63
     1f6:	9c e9       	ldi	r25, 0x9C	; 156
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <MCAL_ADC_StartConversionBusyWait+0x28>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <MCAL_ADC_StartConversionBusyWait+0x2e>
     1fe:	00 00       	nop
     200:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     204:	81 11       	cpse	r24, r1
     206:	07 c0       	rjmp	.+14     	; 0x216 <MCAL_ADC_StartConversionBusyWait+0x46>
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	f8 01       	movw	r30, r16
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	18 c0       	rjmp	.+48     	; 0x246 <MCAL_ADC_StartConversionBusyWait+0x76>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	a9 f4       	brne	.+42     	; 0x244 <MCAL_ADC_StartConversionBusyWait+0x74>
     21a:	84 b1       	in	r24, 0x04	; 4
     21c:	82 95       	swap	r24
     21e:	86 95       	lsr	r24
     220:	86 95       	lsr	r24
     222:	83 70       	andi	r24, 0x03	; 3
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	f8 01       	movw	r30, r16
     228:	91 83       	std	Z+1, r25	; 0x01
     22a:	80 83       	st	Z, r24
     22c:	25 b1       	in	r18, 0x05	; 5
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	22 0f       	add	r18, r18
     232:	33 1f       	adc	r19, r19
     234:	22 0f       	add	r18, r18
     236:	33 1f       	adc	r19, r19
     238:	82 2b       	or	r24, r18
     23a:	93 2b       	or	r25, r19
     23c:	91 83       	std	Z+1, r25	; 0x01
     23e:	80 83       	st	Z, r24
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	01 c0       	rjmp	.+2      	; 0x246 <MCAL_ADC_StartConversionBusyWait+0x76>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <__vector_16>:

void __vector_16(void)
{
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	0f 92       	push	r0
     256:	11 24       	eor	r1, r1
     258:	2f 93       	push	r18
     25a:	3f 93       	push	r19
     25c:	4f 93       	push	r20
     25e:	5f 93       	push	r21
     260:	6f 93       	push	r22
     262:	7f 93       	push	r23
     264:	8f 93       	push	r24
     266:	9f 93       	push	r25
     268:	af 93       	push	r26
     26a:	bf 93       	push	r27
     26c:	ef 93       	push	r30
     26e:	ff 93       	push	r31
	uint16_t local_result;

	if(g_u8Resolution==ADC_RESOLUTION8){
     270:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
     274:	21 11       	cpse	r18, r1
     276:	03 c0       	rjmp	.+6      	; 0x27e <__vector_16+0x30>
		local_result= ADC_ADCH;
     278:	85 b1       	in	r24, 0x05	; 5
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e c0       	rjmp	.+28     	; 0x29a <__vector_16+0x4c>
	}
	else if(g_u8Resolution==ADC_RESOLUTION10){
     27e:	21 30       	cpi	r18, 0x01	; 1
     280:	61 f4       	brne	.+24     	; 0x29a <__vector_16+0x4c>
		local_result= ADC_ADCL>>6 | (uint16_t)ADC_ADCH<<2;
     282:	24 b1       	in	r18, 0x04	; 4
     284:	85 b1       	in	r24, 0x05	; 5
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	22 95       	swap	r18
     292:	26 95       	lsr	r18
     294:	26 95       	lsr	r18
     296:	23 70       	andi	r18, 0x03	; 3
     298:	82 2b       	or	r24, r18
	}

	if(ADC_CallBack!=NULL_PTR){
     29a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <ADC_CallBack>
     29e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <ADC_CallBack+0x1>
     2a2:	30 97       	sbiw	r30, 0x00	; 0
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_16+0x5a>
		ADC_CallBack(local_result);
     2a6:	09 95       	icall
	}
}
     2a8:	ff 91       	pop	r31
     2aa:	ef 91       	pop	r30
     2ac:	bf 91       	pop	r27
     2ae:	af 91       	pop	r26
     2b0:	9f 91       	pop	r25
     2b2:	8f 91       	pop	r24
     2b4:	7f 91       	pop	r23
     2b6:	6f 91       	pop	r22
     2b8:	5f 91       	pop	r21
     2ba:	4f 91       	pop	r20
     2bc:	3f 91       	pop	r19
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <MCAL_DIO_voidSetPinDirection>:
		break ;
		case DIO_PORTC :
			*ptr_u8PortValue = PINC ;
		break ;
		case DIO_PORTD :
			*ptr_u8PortValue = PIND ;
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	d1 f0       	breq	.+52     	; 0x302 <MCAL_DIO_voidSetPinDirection+0x38>
     2ce:	28 f0       	brcs	.+10     	; 0x2da <MCAL_DIO_voidSetPinDirection+0x10>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	59 f1       	breq	.+86     	; 0x32a <MCAL_DIO_voidSetPinDirection+0x60>
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	e9 f1       	breq	.+122    	; 0x352 <MCAL_DIO_voidSetPinDirection+0x88>
     2d8:	08 95       	ret
     2da:	2a b3       	in	r18, 0x1a	; 26
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	06 2e       	mov	r0, r22
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <MCAL_DIO_voidSetPinDirection+0x1e>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <MCAL_DIO_voidSetPinDirection+0x1a>
     2ec:	80 95       	com	r24
     2ee:	82 23       	and	r24, r18
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <MCAL_DIO_voidSetPinDirection+0x2e>
     2f4:	44 0f       	add	r20, r20
     2f6:	55 1f       	adc	r21, r21
     2f8:	6a 95       	dec	r22
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <MCAL_DIO_voidSetPinDirection+0x2a>
     2fc:	48 2b       	or	r20, r24
     2fe:	4a bb       	out	0x1a, r20	; 26
     300:	08 95       	ret
     302:	27 b3       	in	r18, 0x17	; 23
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	06 2e       	mov	r0, r22
     30a:	02 c0       	rjmp	.+4      	; 0x310 <MCAL_DIO_voidSetPinDirection+0x46>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	0a 94       	dec	r0
     312:	e2 f7       	brpl	.-8      	; 0x30c <MCAL_DIO_voidSetPinDirection+0x42>
     314:	80 95       	com	r24
     316:	82 23       	and	r24, r18
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	02 c0       	rjmp	.+4      	; 0x320 <MCAL_DIO_voidSetPinDirection+0x56>
     31c:	44 0f       	add	r20, r20
     31e:	55 1f       	adc	r21, r21
     320:	6a 95       	dec	r22
     322:	e2 f7       	brpl	.-8      	; 0x31c <MCAL_DIO_voidSetPinDirection+0x52>
     324:	48 2b       	or	r20, r24
     326:	47 bb       	out	0x17, r20	; 23
     328:	08 95       	ret
     32a:	24 b3       	in	r18, 0x14	; 20
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	06 2e       	mov	r0, r22
     332:	02 c0       	rjmp	.+4      	; 0x338 <MCAL_DIO_voidSetPinDirection+0x6e>
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	0a 94       	dec	r0
     33a:	e2 f7       	brpl	.-8      	; 0x334 <MCAL_DIO_voidSetPinDirection+0x6a>
     33c:	80 95       	com	r24
     33e:	82 23       	and	r24, r18
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <MCAL_DIO_voidSetPinDirection+0x7e>
     344:	44 0f       	add	r20, r20
     346:	55 1f       	adc	r21, r21
     348:	6a 95       	dec	r22
     34a:	e2 f7       	brpl	.-8      	; 0x344 <MCAL_DIO_voidSetPinDirection+0x7a>
     34c:	48 2b       	or	r20, r24
     34e:	44 bb       	out	0x14, r20	; 20
     350:	08 95       	ret
     352:	21 b3       	in	r18, 0x11	; 17
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	06 2e       	mov	r0, r22
     35a:	02 c0       	rjmp	.+4      	; 0x360 <MCAL_DIO_voidSetPinDirection+0x96>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	0a 94       	dec	r0
     362:	e2 f7       	brpl	.-8      	; 0x35c <MCAL_DIO_voidSetPinDirection+0x92>
     364:	80 95       	com	r24
     366:	82 23       	and	r24, r18
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	02 c0       	rjmp	.+4      	; 0x370 <MCAL_DIO_voidSetPinDirection+0xa6>
     36c:	44 0f       	add	r20, r20
     36e:	55 1f       	adc	r21, r21
     370:	6a 95       	dec	r22
     372:	e2 f7       	brpl	.-8      	; 0x36c <MCAL_DIO_voidSetPinDirection+0xa2>
     374:	48 2b       	or	r20, r24
     376:	41 bb       	out	0x11, r20	; 17
     378:	08 95       	ret

0000037a <MCAL_DIO_voidSetPinValue>:
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	d1 f0       	breq	.+52     	; 0x3b2 <MCAL_DIO_voidSetPinValue+0x38>
     37e:	28 f0       	brcs	.+10     	; 0x38a <MCAL_DIO_voidSetPinValue+0x10>
     380:	82 30       	cpi	r24, 0x02	; 2
     382:	59 f1       	breq	.+86     	; 0x3da <MCAL_DIO_voidSetPinValue+0x60>
     384:	83 30       	cpi	r24, 0x03	; 3
     386:	e9 f1       	breq	.+122    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     388:	08 95       	ret
     38a:	2b b3       	in	r18, 0x1b	; 27
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	06 2e       	mov	r0, r22
     392:	02 c0       	rjmp	.+4      	; 0x398 <MCAL_DIO_voidSetPinValue+0x1e>
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <MCAL_DIO_voidSetPinValue+0x1a>
     39c:	80 95       	com	r24
     39e:	82 23       	and	r24, r18
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MCAL_DIO_voidSetPinValue+0x2e>
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	6a 95       	dec	r22
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MCAL_DIO_voidSetPinValue+0x2a>
     3ac:	48 2b       	or	r20, r24
     3ae:	4b bb       	out	0x1b, r20	; 27
     3b0:	08 95       	ret
     3b2:	28 b3       	in	r18, 0x18	; 24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	06 2e       	mov	r0, r22
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <MCAL_DIO_voidSetPinValue+0x46>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	0a 94       	dec	r0
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <MCAL_DIO_voidSetPinValue+0x42>
     3c4:	80 95       	com	r24
     3c6:	82 23       	and	r24, r18
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <MCAL_DIO_voidSetPinValue+0x56>
     3cc:	44 0f       	add	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	6a 95       	dec	r22
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <MCAL_DIO_voidSetPinValue+0x52>
     3d4:	48 2b       	or	r20, r24
     3d6:	48 bb       	out	0x18, r20	; 24
     3d8:	08 95       	ret
     3da:	25 b3       	in	r18, 0x15	; 21
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	06 2e       	mov	r0, r22
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <MCAL_DIO_voidSetPinValue+0x6e>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	0a 94       	dec	r0
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <MCAL_DIO_voidSetPinValue+0x6a>
     3ec:	80 95       	com	r24
     3ee:	82 23       	and	r24, r18
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <MCAL_DIO_voidSetPinValue+0x7e>
     3f4:	44 0f       	add	r20, r20
     3f6:	55 1f       	adc	r21, r21
     3f8:	6a 95       	dec	r22
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <MCAL_DIO_voidSetPinValue+0x7a>
     3fc:	48 2b       	or	r20, r24
     3fe:	45 bb       	out	0x15, r20	; 21
     400:	08 95       	ret
     402:	22 b3       	in	r18, 0x12	; 18
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	06 2e       	mov	r0, r22
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	80 95       	com	r24
     416:	82 23       	and	r24, r18
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	44 0f       	add	r20, r20
     41e:	55 1f       	adc	r21, r21
     420:	6a 95       	dec	r22
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	48 2b       	or	r20, r24
     426:	42 bb       	out	0x12, r20	; 18
     428:	08 95       	ret

0000042a <MCAL_DIO_voidGetPinValue>:
	}

}
void MCAL_DIO_voidGetPinValue(uint8_t Copy_u8PortNo , uint8_t Copy_u8PinNo , uint8_t *ptr_u8PortValue)
{
	switch(Copy_u8PortNo)
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	89 f0       	breq	.+34     	; 0x450 <MCAL_DIO_voidGetPinValue+0x26>
     42e:	28 f0       	brcs	.+10     	; 0x43a <MCAL_DIO_voidGetPinValue+0x10>
     430:	82 30       	cpi	r24, 0x02	; 2
     432:	c9 f0       	breq	.+50     	; 0x466 <MCAL_DIO_voidGetPinValue+0x3c>
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	11 f1       	breq	.+68     	; 0x47c <MCAL_DIO_voidGetPinValue+0x52>
     438:	08 95       	ret
	{
		case DIO_PORTA :
			*ptr_u8PortValue = GET_BIT(PINA , Copy_u8PinNo);
     43a:	89 b3       	in	r24, 0x19	; 25
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <MCAL_DIO_voidGetPinValue+0x1a>
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	6a 95       	dec	r22
     446:	e2 f7       	brpl	.-8      	; 0x440 <MCAL_DIO_voidGetPinValue+0x16>
     448:	81 70       	andi	r24, 0x01	; 1
     44a:	fa 01       	movw	r30, r20
     44c:	80 83       	st	Z, r24
		break ;
     44e:	08 95       	ret
		case DIO_PORTB :
			*ptr_u8PortValue = GET_BIT(PINB , Copy_u8PinNo);
     450:	86 b3       	in	r24, 0x16	; 22
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <MCAL_DIO_voidGetPinValue+0x30>
     456:	95 95       	asr	r25
     458:	87 95       	ror	r24
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <MCAL_DIO_voidGetPinValue+0x2c>
     45e:	81 70       	andi	r24, 0x01	; 1
     460:	fa 01       	movw	r30, r20
     462:	80 83       	st	Z, r24
		break ;
     464:	08 95       	ret
		case DIO_PORTC :
			*ptr_u8PortValue = GET_BIT(PINC , Copy_u8PinNo);
     466:	83 b3       	in	r24, 0x13	; 19
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <MCAL_DIO_voidGetPinValue+0x46>
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	6a 95       	dec	r22
     472:	e2 f7       	brpl	.-8      	; 0x46c <MCAL_DIO_voidGetPinValue+0x42>
     474:	81 70       	andi	r24, 0x01	; 1
     476:	fa 01       	movw	r30, r20
     478:	80 83       	st	Z, r24
		break ;
     47a:	08 95       	ret
		case DIO_PORTD :
			*ptr_u8PortValue = GET_BIT(PIND , Copy_u8PinNo);
     47c:	80 b3       	in	r24, 0x10	; 16
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <MCAL_DIO_voidGetPinValue+0x5c>
     482:	95 95       	asr	r25
     484:	87 95       	ror	r24
     486:	6a 95       	dec	r22
     488:	e2 f7       	brpl	.-8      	; 0x482 <MCAL_DIO_voidGetPinValue+0x58>
     48a:	81 70       	andi	r24, 0x01	; 1
     48c:	fa 01       	movw	r30, r20
     48e:	80 83       	st	Z, r24
     490:	08 95       	ret

00000492 <HAL_EEPROM_WR>:
#include "CPU_CONFIGURATION.h"
#include "TWI.h"
#include "EEPROM_24C16.h"

void HAL_EEPROM_WR (PAGE_ADDS u8DeviceAddress,uint8_t u8Address , uint8_t u8Data)
{
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	18 2f       	mov	r17, r24
     49a:	d6 2f       	mov	r29, r22
     49c:	c4 2f       	mov	r28, r20
	MCAL_TWI_START_Condition();
     49e:	0e 94 0b 08 	call	0x1016	; 0x1016 <MCAL_TWI_START_Condition>
	MCAL_TWI_Master_TRANSMIT_Address(u8DeviceAddress , WRITE);
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	81 2f       	mov	r24, r17
     4a6:	0e 94 25 08 	call	0x104a	; 0x104a <MCAL_TWI_Master_TRANSMIT_Address>
	MCAL_TWI_Master_TRANSMIT_Data(u8Address);
     4aa:	8d 2f       	mov	r24, r29
     4ac:	0e 94 43 08 	call	0x1086	; 0x1086 <MCAL_TWI_Master_TRANSMIT_Data>
	MCAL_TWI_Master_TRANSMIT_Data(u8Data);
     4b0:	8c 2f       	mov	r24, r28
     4b2:	0e 94 43 08 	call	0x1086	; 0x1086 <MCAL_TWI_Master_TRANSMIT_Data>
	MCAL_TWI_STOP_Condition();
     4b6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <MCAL_TWI_STOP_Condition>
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	08 95       	ret

000004c2 <HAL_EEPROM_RD>:

void HAL_EEPROM_RD (PAGE_ADDS u8DeviceAddress,uint8_t u8Address , uint8_t* u8Data)
{
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	c8 2f       	mov	r28, r24
     4cc:	d6 2f       	mov	r29, r22
     4ce:	8a 01       	movw	r16, r20
	MCAL_TWI_START_Condition();
     4d0:	0e 94 0b 08 	call	0x1016	; 0x1016 <MCAL_TWI_START_Condition>
	MCAL_TWI_Master_TRANSMIT_Address(u8DeviceAddress , WRITE);
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	8c 2f       	mov	r24, r28
     4d8:	0e 94 25 08 	call	0x104a	; 0x104a <MCAL_TWI_Master_TRANSMIT_Address>
	MCAL_TWI_Master_TRANSMIT_Data(u8Address);
     4dc:	8d 2f       	mov	r24, r29
     4de:	0e 94 43 08 	call	0x1086	; 0x1086 <MCAL_TWI_Master_TRANSMIT_Data>
	
	MCAL_TWI_REPSTART_Condition();
     4e2:	0e 94 18 08 	call	0x1030	; 0x1030 <MCAL_TWI_REPSTART_Condition>
	MCAL_TWI_Master_TRANSMIT_Address(u8DeviceAddress , READ);
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	8c 2f       	mov	r24, r28
     4ea:	0e 94 25 08 	call	0x104a	; 0x104a <MCAL_TWI_Master_TRANSMIT_Address>
	MCAL_TWI_Master_RECIEVE_Data_ACK(u8Data);
     4ee:	c8 01       	movw	r24, r16
     4f0:	0e 94 57 08 	call	0x10ae	; 0x10ae <MCAL_TWI_Master_RECIEVE_Data_ACK>
	MCAL_TWI_STOP_Condition();
     4f4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <MCAL_TWI_STOP_Condition>
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <MCAL_EXTINT_u8Init>:

uint8_t  MCAL_EXTINT_u8Init(uint8_t Copy_EXTINT_No , uint8_t Copy_EXINT_LevelDetection)
{
	uint8_t Local_ErrorStatus = NO_ERROR ;

	switch(Copy_EXTINT_No)
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	49 f1       	breq	.+82     	; 0x558 <MCAL_EXTINT_u8Init+0x56>
     506:	20 f0       	brcs	.+8      	; 0x510 <MCAL_EXTINT_u8Init+0xe>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	09 f4       	brne	.+2      	; 0x50e <MCAL_EXTINT_u8Init+0xc>
     50c:	49 c0       	rjmp	.+146    	; 0x5a0 <MCAL_EXTINT_u8Init+0x9e>
     50e:	5c c0       	rjmp	.+184    	; 0x5c8 <MCAL_EXTINT_u8Init+0xc6>
	{
	case EXTINT_0 :
			switch(Copy_EXINT_LevelDetection)
     510:	61 30       	cpi	r22, 0x01	; 1
     512:	69 f0       	breq	.+26     	; 0x52e <MCAL_EXTINT_u8Init+0x2c>
     514:	28 f0       	brcs	.+10     	; 0x520 <MCAL_EXTINT_u8Init+0x1e>
     516:	62 30       	cpi	r22, 0x02	; 2
     518:	89 f0       	breq	.+34     	; 0x53c <MCAL_EXTINT_u8Init+0x3a>
     51a:	63 30       	cpi	r22, 0x03	; 3
     51c:	b1 f0       	breq	.+44     	; 0x54a <MCAL_EXTINT_u8Init+0x48>
     51e:	56 c0       	rjmp	.+172    	; 0x5cc <MCAL_EXTINT_u8Init+0xca>
			{
			case EXTINT_LOW_LEVEL :
				CLR_BIT(EXTINT_MCUCR , MCUCR_ISC00);
     520:	85 b7       	in	r24, 0x35	; 53
     522:	8e 7f       	andi	r24, 0xFE	; 254
     524:	85 bf       	out	0x35, r24	; 53
				CLR_BIT(EXTINT_MCUCR , MCUCR_ISC01);
     526:	85 b7       	in	r24, 0x35	; 53
     528:	8d 7f       	andi	r24, 0xFD	; 253
     52a:	85 bf       	out	0x35, r24	; 53
				break;
     52c:	53 c0       	rjmp	.+166    	; 0x5d4 <MCAL_EXTINT_u8Init+0xd2>
			case EXTINT_ON_CHANGE :
				SET_BIT(EXTINT_MCUCR , MCUCR_ISC00);
     52e:	85 b7       	in	r24, 0x35	; 53
     530:	81 60       	ori	r24, 0x01	; 1
     532:	85 bf       	out	0x35, r24	; 53
				CLR_BIT(EXTINT_MCUCR , MCUCR_ISC01);
     534:	85 b7       	in	r24, 0x35	; 53
     536:	8d 7f       	andi	r24, 0xFD	; 253
     538:	85 bf       	out	0x35, r24	; 53
				break;
     53a:	4c c0       	rjmp	.+152    	; 0x5d4 <MCAL_EXTINT_u8Init+0xd2>
			case EXTINT_FALLING_EDGE :
				CLR_BIT(EXTINT_MCUCR , MCUCR_ISC00);
     53c:	85 b7       	in	r24, 0x35	; 53
     53e:	8e 7f       	andi	r24, 0xFE	; 254
     540:	85 bf       	out	0x35, r24	; 53
				SET_BIT(EXTINT_MCUCR , MCUCR_ISC01);
     542:	85 b7       	in	r24, 0x35	; 53
     544:	82 60       	ori	r24, 0x02	; 2
     546:	85 bf       	out	0x35, r24	; 53
				break;
     548:	45 c0       	rjmp	.+138    	; 0x5d4 <MCAL_EXTINT_u8Init+0xd2>
			case EXTINT_RISING_EDGE :
				SET_BIT(EXTINT_MCUCR , MCUCR_ISC00);
     54a:	85 b7       	in	r24, 0x35	; 53
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	85 bf       	out	0x35, r24	; 53
				SET_BIT(EXTINT_MCUCR , MCUCR_ISC01);
     550:	85 b7       	in	r24, 0x35	; 53
     552:	82 60       	ori	r24, 0x02	; 2
     554:	85 bf       	out	0x35, r24	; 53
				break;
     556:	3e c0       	rjmp	.+124    	; 0x5d4 <MCAL_EXTINT_u8Init+0xd2>
				SET_BIT(EXTINT_SREG , SREG_GLOBAL_ENABLE);
				SET_BIT(EXTINT_GICR , GICR_INT_0);
			}
		break ;
	case EXTINT_1 :
		    switch(Copy_EXINT_LevelDetection)
     558:	61 30       	cpi	r22, 0x01	; 1
     55a:	69 f0       	breq	.+26     	; 0x576 <MCAL_EXTINT_u8Init+0x74>
     55c:	28 f0       	brcs	.+10     	; 0x568 <MCAL_EXTINT_u8Init+0x66>
     55e:	62 30       	cpi	r22, 0x02	; 2
     560:	89 f0       	breq	.+34     	; 0x584 <MCAL_EXTINT_u8Init+0x82>
     562:	63 30       	cpi	r22, 0x03	; 3
     564:	b1 f0       	breq	.+44     	; 0x592 <MCAL_EXTINT_u8Init+0x90>
     566:	34 c0       	rjmp	.+104    	; 0x5d0 <MCAL_EXTINT_u8Init+0xce>
		    {
		    case EXTINT_LOW_LEVEL :
		    	CLR_BIT(EXTINT_MCUCR , MCUCR_ISC10);
     568:	85 b7       	in	r24, 0x35	; 53
     56a:	8b 7f       	andi	r24, 0xFB	; 251
     56c:	85 bf       	out	0x35, r24	; 53
		    	CLR_BIT(EXTINT_MCUCR , MCUCR_ISC11);
     56e:	85 b7       	in	r24, 0x35	; 53
     570:	87 7f       	andi	r24, 0xF7	; 247
     572:	85 bf       	out	0x35, r24	; 53
		    	break;
     574:	37 c0       	rjmp	.+110    	; 0x5e4 <MCAL_EXTINT_u8Init+0xe2>
		    case EXTINT_ON_CHANGE :
		    	SET_BIT(EXTINT_MCUCR , MCUCR_ISC10);
     576:	85 b7       	in	r24, 0x35	; 53
     578:	84 60       	ori	r24, 0x04	; 4
     57a:	85 bf       	out	0x35, r24	; 53
		    	CLR_BIT(EXTINT_MCUCR , MCUCR_ISC11);
     57c:	85 b7       	in	r24, 0x35	; 53
     57e:	87 7f       	andi	r24, 0xF7	; 247
     580:	85 bf       	out	0x35, r24	; 53
		    	break;
     582:	30 c0       	rjmp	.+96     	; 0x5e4 <MCAL_EXTINT_u8Init+0xe2>
		    case EXTINT_FALLING_EDGE :
		    	CLR_BIT(EXTINT_MCUCR , MCUCR_ISC10);
     584:	85 b7       	in	r24, 0x35	; 53
     586:	8b 7f       	andi	r24, 0xFB	; 251
     588:	85 bf       	out	0x35, r24	; 53
		    	SET_BIT(EXTINT_MCUCR , MCUCR_ISC11);
     58a:	85 b7       	in	r24, 0x35	; 53
     58c:	88 60       	ori	r24, 0x08	; 8
     58e:	85 bf       	out	0x35, r24	; 53
		    	break;
     590:	29 c0       	rjmp	.+82     	; 0x5e4 <MCAL_EXTINT_u8Init+0xe2>
		    case EXTINT_RISING_EDGE :
		    	SET_BIT(EXTINT_MCUCR , MCUCR_ISC10);
     592:	85 b7       	in	r24, 0x35	; 53
     594:	84 60       	ori	r24, 0x04	; 4
     596:	85 bf       	out	0x35, r24	; 53
		    	SET_BIT(EXTINT_MCUCR , MCUCR_ISC11);
     598:	85 b7       	in	r24, 0x35	; 53
     59a:	88 60       	ori	r24, 0x08	; 8
     59c:	85 bf       	out	0x35, r24	; 53
		    	break;
     59e:	22 c0       	rjmp	.+68     	; 0x5e4 <MCAL_EXTINT_u8Init+0xe2>
		    	SET_BIT(EXTINT_GICR , GICR_INT_1);
		    }
		break ;
	case EXTINT_2 :

		 switch(Copy_EXINT_LevelDetection)
     5a0:	62 30       	cpi	r22, 0x02	; 2
     5a2:	19 f0       	breq	.+6      	; 0x5aa <MCAL_EXTINT_u8Init+0xa8>
     5a4:	63 30       	cpi	r22, 0x03	; 3
     5a6:	29 f0       	breq	.+10     	; 0x5b2 <MCAL_EXTINT_u8Init+0xb0>
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <MCAL_EXTINT_u8Init+0xb6>
		  {
		 	 case EXTINT_FALLING_EDGE :
				 CLR_BIT(EXTINT_MCUSCR , MCUSCR_ISC2);
     5aa:	84 b7       	in	r24, 0x34	; 52
     5ac:	8f 7b       	andi	r24, 0xBF	; 191
     5ae:	84 bf       	out	0x34, r24	; 52
				   break;
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <MCAL_EXTINT_u8Init+0xb6>
			case EXTINT_RISING_EDGE :
				 SET_BIT(EXTINT_MCUCR , MCUSCR_ISC2);
     5b2:	85 b7       	in	r24, 0x35	; 53
     5b4:	80 64       	ori	r24, 0x40	; 64
     5b6:	85 bf       	out	0x35, r24	; 53
				    break;

		  }
		 if(Local_ErrorStatus == NO_ERROR)
		 {
			 SET_BIT(EXTINT_SREG , SREG_GLOBAL_ENABLE);
     5b8:	8f b7       	in	r24, 0x3f	; 63
     5ba:	80 68       	ori	r24, 0x80	; 128
     5bc:	8f bf       	out	0x3f, r24	; 63
			 SET_BIT(EXTINT_GICR , GICR_INT_2);
     5be:	8b b7       	in	r24, 0x3b	; 59
     5c0:	80 62       	ori	r24, 0x20	; 32
     5c2:	8b bf       	out	0x3b, r24	; 59
void __vector_2(void)__attribute((signal,used));
void __vector_3(void)__attribute((signal,used));

uint8_t  MCAL_EXTINT_u8Init(uint8_t Copy_EXTINT_No , uint8_t Copy_EXINT_LevelDetection)
{
	uint8_t Local_ErrorStatus = NO_ERROR ;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	08 95       	ret
			 SET_BIT(EXTINT_SREG , SREG_GLOBAL_ENABLE);
			 SET_BIT(EXTINT_GICR , GICR_INT_2);
		 }
		break ;
	default :
		Local_ErrorStatus = ERROR ;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	08 95       	ret
			case EXTINT_RISING_EDGE :
				SET_BIT(EXTINT_MCUCR , MCUCR_ISC00);
				SET_BIT(EXTINT_MCUCR , MCUCR_ISC01);
				break;
			default :
				Local_ErrorStatus = ERROR ;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	08 95       	ret
		    case EXTINT_RISING_EDGE :
		    	SET_BIT(EXTINT_MCUCR , MCUCR_ISC10);
		    	SET_BIT(EXTINT_MCUCR , MCUCR_ISC11);
		    	break;
	        default :
		    	Local_ErrorStatus = ERROR ;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	08 95       	ret
				break;
			}

			if(Local_ErrorStatus == NO_ERROR)
			{
				SET_BIT(EXTINT_SREG , SREG_GLOBAL_ENABLE);
     5d4:	8f b7       	in	r24, 0x3f	; 63
     5d6:	80 68       	ori	r24, 0x80	; 128
     5d8:	8f bf       	out	0x3f, r24	; 63
				SET_BIT(EXTINT_GICR , GICR_INT_0);
     5da:	8b b7       	in	r24, 0x3b	; 59
     5dc:	80 64       	ori	r24, 0x40	; 64
     5de:	8b bf       	out	0x3b, r24	; 59
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret
		    	break;
		    }

		    if(Local_ErrorStatus == NO_ERROR)
		    {
		    	SET_BIT(EXTINT_SREG , SREG_GLOBAL_ENABLE);
     5e4:	8f b7       	in	r24, 0x3f	; 63
     5e6:	80 68       	ori	r24, 0x80	; 128
     5e8:	8f bf       	out	0x3f, r24	; 63
		    	SET_BIT(EXTINT_GICR , GICR_INT_1);
     5ea:	8b b7       	in	r24, 0x3b	; 59
     5ec:	80 68       	ori	r24, 0x80	; 128
     5ee:	8b bf       	out	0x3b, r24	; 59
     5f0:	81 e0       	ldi	r24, 0x01	; 1
		break;

	}

	return Local_ErrorStatus;
}
     5f2:	08 95       	ret

000005f4 <MCAL_EXTINT_u8SetCallBack>:
uint8_t MCAL_EXTINT_u8SetCallBack(uint8_t Copy_EXTINT_No  , void (*Ptr_PointerToFunction)(void))
{
	uint8_t Local_u8ErrorStatus = NO_ERROR;


	switch (Copy_EXTINT_No) {
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	49 f0       	breq	.+18     	; 0x60a <MCAL_EXTINT_u8SetCallBack+0x16>
     5f8:	18 f0       	brcs	.+6      	; 0x600 <MCAL_EXTINT_u8SetCallBack+0xc>
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	59 f0       	breq	.+22     	; 0x614 <MCAL_EXTINT_u8SetCallBack+0x20>
     5fe:	0e c0       	rjmp	.+28     	; 0x61c <MCAL_EXTINT_u8SetCallBack+0x28>
		case EXTINT_0:

			CallBack_INT0 = Ptr_PointerToFunction ;
     600:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <CallBack_INT0+0x1>
     604:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <CallBack_INT0>
			break;
     608:	09 c0       	rjmp	.+18     	; 0x61c <MCAL_EXTINT_u8SetCallBack+0x28>
		case EXTINT_1:
			CallBack_INT1 = Ptr_PointerToFunction ;
     60a:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <CallBack_INT1+0x1>
     60e:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <CallBack_INT1>
			break;
     612:	04 c0       	rjmp	.+8      	; 0x61c <MCAL_EXTINT_u8SetCallBack+0x28>
		case EXTINT_2:
			CallBack_INT2 = Ptr_PointerToFunction ;
     614:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <CallBack_INT2+0x1>
     618:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <CallBack_INT2>
			break;
	}

	return Local_u8ErrorStatus;

}
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret

00000620 <__vector_1>:

void __vector_1(void)
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	2f 93       	push	r18
     62c:	3f 93       	push	r19
     62e:	4f 93       	push	r20
     630:	5f 93       	push	r21
     632:	6f 93       	push	r22
     634:	7f 93       	push	r23
     636:	8f 93       	push	r24
     638:	9f 93       	push	r25
     63a:	af 93       	push	r26
     63c:	bf 93       	push	r27
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
	if(CallBack_INT0 != NULL_PTR)
     642:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <CallBack_INT0>
     646:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <CallBack_INT0+0x1>
     64a:	30 97       	sbiw	r30, 0x00	; 0
     64c:	09 f0       	breq	.+2      	; 0x650 <__vector_1+0x30>
	{
		CallBack_INT0();
     64e:	09 95       	icall
	}
}
     650:	ff 91       	pop	r31
     652:	ef 91       	pop	r30
     654:	bf 91       	pop	r27
     656:	af 91       	pop	r26
     658:	9f 91       	pop	r25
     65a:	8f 91       	pop	r24
     65c:	7f 91       	pop	r23
     65e:	6f 91       	pop	r22
     660:	5f 91       	pop	r21
     662:	4f 91       	pop	r20
     664:	3f 91       	pop	r19
     666:	2f 91       	pop	r18
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <__vector_2>:

void __vector_2(void)
{
     672:	1f 92       	push	r1
     674:	0f 92       	push	r0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	0f 92       	push	r0
     67a:	11 24       	eor	r1, r1
     67c:	2f 93       	push	r18
     67e:	3f 93       	push	r19
     680:	4f 93       	push	r20
     682:	5f 93       	push	r21
     684:	6f 93       	push	r22
     686:	7f 93       	push	r23
     688:	8f 93       	push	r24
     68a:	9f 93       	push	r25
     68c:	af 93       	push	r26
     68e:	bf 93       	push	r27
     690:	ef 93       	push	r30
     692:	ff 93       	push	r31
	if(CallBack_INT1 != NULL_PTR)
     694:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBack_INT1>
     698:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBack_INT1+0x1>
     69c:	30 97       	sbiw	r30, 0x00	; 0
     69e:	09 f0       	breq	.+2      	; 0x6a2 <__vector_2+0x30>
	{
		CallBack_INT1();
     6a0:	09 95       	icall
	}
}
     6a2:	ff 91       	pop	r31
     6a4:	ef 91       	pop	r30
     6a6:	bf 91       	pop	r27
     6a8:	af 91       	pop	r26
     6aa:	9f 91       	pop	r25
     6ac:	8f 91       	pop	r24
     6ae:	7f 91       	pop	r23
     6b0:	6f 91       	pop	r22
     6b2:	5f 91       	pop	r21
     6b4:	4f 91       	pop	r20
     6b6:	3f 91       	pop	r19
     6b8:	2f 91       	pop	r18
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <__vector_3>:

void __vector_3(void)
{
     6c4:	1f 92       	push	r1
     6c6:	0f 92       	push	r0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	0f 92       	push	r0
     6cc:	11 24       	eor	r1, r1
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
	if(CallBack_INT2 != NULL_PTR)
     6e6:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <CallBack_INT2>
     6ea:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <CallBack_INT2+0x1>
     6ee:	30 97       	sbiw	r30, 0x00	; 0
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <__vector_3+0x30>
	{
		CallBack_INT2();
     6f2:	09 95       	icall
	}
}
     6f4:	ff 91       	pop	r31
     6f6:	ef 91       	pop	r30
     6f8:	bf 91       	pop	r27
     6fa:	af 91       	pop	r26
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	7f 91       	pop	r23
     702:	6f 91       	pop	r22
     704:	5f 91       	pop	r21
     706:	4f 91       	pop	r20
     708:	3f 91       	pop	r19
     70a:	2f 91       	pop	r18
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti

00000716 <Heating_LED_ISR>:
	
	if(logic)
		HAL_MAX7221_DISPLAY_ON();

	else
		HAL_MAX7221_DISPLAY_OFF();
     716:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <toggle_led.2013>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	48 27       	eor	r20, r24
     71e:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <toggle_led.2013>
     722:	67 e0       	ldi	r22, 0x07	; 7
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     72a:	08 95       	ret

0000072c <Timer2_ISR>:
     72c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <Current_Temp>
     730:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <Current_Temp+0x1>
     734:	0e 94 8a 05 	call	0xb14	; 0xb14 <HAL_MAX7221_PUT_NUMBER>
     738:	08 95       	ret

0000073a <UP_BUTTON_ISR>:
     73a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Set_Temp>
     73e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Set_Temp+0x1>
     742:	05 96       	adiw	r24, 0x05	; 5
     744:	8c 34       	cpi	r24, 0x4C	; 76
     746:	91 05       	cpc	r25, r1
     748:	28 f4       	brcc	.+10     	; 0x754 <UP_BUTTON_ISR+0x1a>
     74a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Set_Temp+0x1>
     74e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Set_Temp>
     752:	06 c0       	rjmp	.+12     	; 0x760 <UP_BUTTON_ISR+0x26>
     754:	8b e4       	ldi	r24, 0x4B	; 75
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Set_Temp+0x1>
     75c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Set_Temp>
     760:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Set_Temp>
     764:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Set_Temp+0x1>
     768:	0e 94 8a 05 	call	0xb14	; 0xb14 <HAL_MAX7221_PUT_NUMBER>
     76c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <Set_Temp>
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	80 ea       	ldi	r24, 0xA0	; 160
     774:	0e 94 49 02 	call	0x492	; 0x492 <HAL_EEPROM_WR>
     778:	26 e9       	ldi	r18, 0x96	; 150
     77a:	33 e0       	ldi	r19, 0x03	; 3
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	68 ee       	ldi	r22, 0xE8	; 232
     780:	73 e0       	ldi	r23, 0x03	; 3
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 51 07 	call	0xea2	; 0xea2 <MCAL_TIMER2_WITH_INTERRUPT_Set_Delay>
     78a:	08 95       	ret

0000078c <DOWN_BUTTON_ISR>:
     78c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Set_Temp>
     790:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Set_Temp+0x1>
     794:	05 97       	sbiw	r24, 0x05	; 5
     796:	83 32       	cpi	r24, 0x23	; 35
     798:	91 05       	cpc	r25, r1
     79a:	28 f0       	brcs	.+10     	; 0x7a6 <DOWN_BUTTON_ISR+0x1a>
     79c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Set_Temp+0x1>
     7a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Set_Temp>
     7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <DOWN_BUTTON_ISR+0x26>
     7a6:	83 e2       	ldi	r24, 0x23	; 35
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Set_Temp+0x1>
     7ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Set_Temp>
     7b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Set_Temp>
     7b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Set_Temp+0x1>
     7ba:	0e 94 8a 05 	call	0xb14	; 0xb14 <HAL_MAX7221_PUT_NUMBER>
     7be:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <Set_Temp>
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	80 ea       	ldi	r24, 0xA0	; 160
     7c6:	0e 94 49 02 	call	0x492	; 0x492 <HAL_EEPROM_WR>
     7ca:	26 e9       	ldi	r18, 0x96	; 150
     7cc:	33 e0       	ldi	r19, 0x03	; 3
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	68 ee       	ldi	r22, 0xE8	; 232
     7d2:	73 e0       	ldi	r23, 0x03	; 3
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 51 07 	call	0xea2	; 0xea2 <MCAL_TIMER2_WITH_INTERRUPT_Set_Delay>
     7dc:	08 95       	ret

000007de <Heater_Turn_On>:
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Heater_State>
     7e4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <MCAL_TIMER0_RESUME>
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	66 e0       	ldi	r22, 0x06	; 6
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     7f2:	08 95       	ret

000007f4 <Heater_Turn_Off>:
     7f4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Heater_State>
     7f8:	0e 94 d7 06 	call	0xdae	; 0xdae <MCAL_TIMER0_STOP>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	66 e0       	ldi	r22, 0x06	; 6
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     806:	08 95       	ret

00000808 <Cooling_Turn_On>:
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Cooling_State>
     80e:	0e 94 d7 06 	call	0xdae	; 0xdae <MCAL_TIMER0_STOP>
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	67 e0       	ldi	r22, 0x07	; 7
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	65 e0       	ldi	r22, 0x05	; 5
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     826:	08 95       	ret

00000828 <Cooling_Turn_Off>:
     828:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Cooling_State>
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	67 e0       	ldi	r22, 0x07	; 7
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	65 e0       	ldi	r22, 0x05	; 5
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     840:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <MCAL_TIMER0_RESUME>
     844:	08 95       	ret

00000846 <POWER_ISR>:
     846:	46 e7       	ldi	r20, 0x76	; 118
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_DIO_voidGetPinValue>
     852:	45 e7       	ldi	r20, 0x75	; 117
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	66 e0       	ldi	r22, 0x06	; 6
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_DIO_voidGetPinValue>
     85e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Cooling_State>
     862:	81 11       	cpse	r24, r1
     864:	04 c0       	rjmp	.+8      	; 0x86e <__stack+0xf>
     866:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Heater_State>
     86a:	88 23       	and	r24, r24
     86c:	49 f0       	breq	.+18     	; 0x880 <__stack+0x21>
     86e:	0e 94 14 04 	call	0x828	; 0x828 <Cooling_Turn_Off>
     872:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Heater_Turn_Off>
     876:	0e 94 79 05 	call	0xaf2	; 0xaf2 <HAL_MAX7221_DISPLAY_OFF>
     87a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Electric_Heater_State>
     87e:	08 95       	ret
     880:	0e 94 ef 03 	call	0x7de	; 0x7de <Heater_Turn_On>
     884:	0e 94 68 05 	call	0xad0	; 0xad0 <HAL_MAX7221_DISPLAY_ON>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Electric_Heater_State>
     88e:	08 95       	ret

00000890 <main>:




int main(void)
{	
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	00 d0       	rcall	.+0      	; 0x896 <main+0x6>
     896:	00 d0       	rcall	.+0      	; 0x898 <main+0x8>
     898:	1f 92       	push	r1
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
	/**UART Display for Debugging on Virtual Terminal**/
	MCAL_UART_Init(NULL_PTR);
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <MCAL_UART_Init>
	
	
	/** Seven SEGMENT DISPLAY **/
	MCAL_SPI_Init(NULL_PTR);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 d5 05 	call	0xbaa	; 0xbaa <MCAL_SPI_Init>
	HAL_MAX7221_Init();
     8ae:	0e 94 27 05 	call	0xa4e	; 0xa4e <HAL_MAX7221_Init>
	HAL_MAX7221_PUT_NUMBER(Set_Temp);
     8b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Set_Temp>
     8b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Set_Temp+0x1>
     8ba:	0e 94 8a 05 	call	0xb14	; 0xb14 <HAL_MAX7221_PUT_NUMBER>
	
	
	/** Heating Element , Cooling Element**/
	MCAL_DIO_voidSetPinDirection(Cooling_EL_PORT	 ,DIO_OUTPUT);
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	65 e0       	ldi	r22, 0x05	; 5
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 65 01 	call	0x2ca	; 0x2ca <MCAL_DIO_voidSetPinDirection>
	MCAL_DIO_voidSetPinDirection(Heating_EL_PORT	 ,DIO_OUTPUT);
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	66 e0       	ldi	r22, 0x06	; 6
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <MCAL_DIO_voidSetPinDirection>
	MCAL_DIO_voidSetPinDirection(Heating_EL_LED_PORT ,DIO_OUTPUT);
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	67 e0       	ldi	r22, 0x07	; 7
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	0e 94 65 01 	call	0x2ca	; 0x2ca <MCAL_DIO_voidSetPinDirection>
	
	
	/** LM35 ADC Initialize **/
	ADC_ConfigStr_t LM35_Config = {ADC_AVCC_WITH_EXTERNAL_CAPACITORS_AT_VREF , ADC_POLLING , ADC_NO_AUTO_TRIGGER , ADC_PRESCALAR_64 , ADC_RESOLUTION10};
     8dc:	85 e0       	ldi	r24, 0x05	; 5
     8de:	e2 e6       	ldi	r30, 0x62	; 98
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	de 01       	movw	r26, r28
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	01 90       	ld	r0, Z+
     8e8:	0d 92       	st	X+, r0
     8ea:	8a 95       	dec	r24
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <main+0x56>
	MCAL_ADC_Init ( &LM35_Config );
     8ee:	ce 01       	movw	r24, r28
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	0e 94 8a 00 	call	0x114	; 0x114 <MCAL_ADC_Init>
	
	
	/** External EEPROM **/
	MCAL_TWI_MASTER_Init();
     8f6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <MCAL_TWI_MASTER_Init>
	HAL_EEPROM_RD (EEPROM_PAGE1_ADDRESS , 0 , &Set_Temp);	/*Retrieve set temperature*/
     8fa:	40 e6       	ldi	r20, 0x60	; 96
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	80 ea       	ldi	r24, 0xA0	; 160
     902:	0e 94 61 02 	call	0x4c2	; 0x4c2 <HAL_EEPROM_RD>
	
	
	/**	ON/OFF Button Interrupt**/
	MCAL_EXTINT_u8Init(EXTINT_2 , EXTINT_FALLING_EDGE);
     906:	62 e0       	ldi	r22, 0x02	; 2
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	0e 94 81 02 	call	0x502	; 0x502 <MCAL_EXTINT_u8Init>
	MCAL_EXTINT_u8SetCallBack(EXTINT_2 , POWER_ISR);
     90e:	63 e2       	ldi	r22, 0x23	; 35
     910:	74 e0       	ldi	r23, 0x04	; 4
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <MCAL_EXTINT_u8SetCallBack>
	/** UP BUTTON Interrupt**/
	MCAL_EXTINT_u8Init(EXTINT_0 , EXTINT_RISING_EDGE);
     918:	63 e0       	ldi	r22, 0x03	; 3
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 81 02 	call	0x502	; 0x502 <MCAL_EXTINT_u8Init>
	MCAL_EXTINT_u8SetCallBack(EXTINT_0 , UP_BUTTON_ISR);
     920:	6d e9       	ldi	r22, 0x9D	; 157
     922:	73 e0       	ldi	r23, 0x03	; 3
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <MCAL_EXTINT_u8SetCallBack>
	/** DOWN BUTTON Interrupt**/
	MCAL_EXTINT_u8Init(EXTINT_1 , EXTINT_RISING_EDGE);
     92a:	63 e0       	ldi	r22, 0x03	; 3
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 81 02 	call	0x502	; 0x502 <MCAL_EXTINT_u8Init>
	MCAL_EXTINT_u8SetCallBack(EXTINT_1 , DOWN_BUTTON_ISR);
     932:	66 ec       	ldi	r22, 0xC6	; 198
     934:	73 e0       	ldi	r23, 0x03	; 3
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <MCAL_EXTINT_u8SetCallBack>
	
	
	/**Timer0 Initialize**/
	MCAL_TIMER0_WITH_INTERRUPT_Initialization();
     93c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <MCAL_TIMER0_WITH_INTERRUPT_Initialization>
	MCAL_TIMER0_WITH_INTERRUPT_Set_Delay(150, 0, Heating_LED_ISR);	/*Must be 1 second but 0.15 second chosen for a better simulation on Proteus*/
     940:	2b e8       	ldi	r18, 0x8B	; 139
     942:	33 e0       	ldi	r19, 0x03	; 3
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	66 e9       	ldi	r22, 0x96	; 150
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 34 06 	call	0xc68	; 0xc68 <MCAL_TIMER0_WITH_INTERRUPT_Set_Delay>
	//MCAL_TIMER1_WITH_INTERRUPT_Initialization();
	//MCAL_TIMER1_WITH_INTERRUPT_Set_Delay(200 , 0 , Timer1_ISR);
	//MCAL_TIMER1_STOP();
	
	/**Timer2 Initialize**/
	MCAL_TIMER2_WITH_INTERRUPT_Initialization();
     952:	0e 94 3b 07 	call	0xe76	; 0xe76 <MCAL_TIMER2_WITH_INTERRUPT_Initialization>
	MCAL_TIMER2_WITH_INTERRUPT_Set_Delay(500 , 0 , Timer2_ISR);    /*Must be 5 seconds but 1 second chosen for a better simulation on Proteus*/
     956:	26 e9       	ldi	r18, 0x96	; 150
     958:	33 e0       	ldi	r19, 0x03	; 3
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	64 ef       	ldi	r22, 0xF4	; 244
     95e:	71 e0       	ldi	r23, 0x01	; 1
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 51 07 	call	0xea2	; 0xea2 <MCAL_TIMER2_WITH_INTERRUPT_Set_Delay>
	
	
	/*********Start Up Configurations*********/
		Cooling_Turn_Off();
     968:	0e 94 14 04 	call	0x828	; 0x828 <Cooling_Turn_Off>
		Heater_Turn_Off(); 
     96c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Heater_Turn_Off>
		HAL_MAX7221_DISPLAY_OFF();
     970:	0e 94 79 05 	call	0xaf2	; 0xaf2 <HAL_MAX7221_DISPLAY_OFF>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	85 ea       	ldi	r24, 0xA5	; 165
     978:	9e e0       	ldi	r25, 0x0E	; 14
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	90 40       	sbci	r25, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <main+0xea>
     982:	00 c0       	rjmp	.+0      	; 0x984 <main+0xf4>
     984:	00 00       	nop
	
	/*Read water temperature and display it at start*/
	
		_delay_ms(300);		/*LM35 takes time to start sending correct signals*/
	
		MCAL_ADC_StartConversionBusyWait( ADC_CHANNEL0 , &Current_Temp );	/*read LM35 Signal*/
     986:	62 e7       	ldi	r22, 0x72	; 114
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <MCAL_ADC_StartConversionBusyWait>
	
		Current_Temp = ( (uint32_t) Current_Temp * 500 ) / 1024 ;
     990:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <Current_Temp>
     994:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <Current_Temp+0x1>
     998:	a4 ef       	ldi	r26, 0xF4	; 244
     99a:	b1 e0       	ldi	r27, 0x01	; 1
     99c:	0e 94 24 0c 	call	0x1848	; 0x1848 <__umulhisi3>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	07 2e       	mov	r0, r23
     9a6:	7a e0       	ldi	r23, 0x0A	; 10
     9a8:	b6 95       	lsr	r27
     9aa:	a7 95       	ror	r26
     9ac:	97 95       	ror	r25
     9ae:	87 95       	ror	r24
     9b0:	7a 95       	dec	r23
     9b2:	d1 f7       	brne	.-12     	; 0x9a8 <main+0x118>
     9b4:	70 2d       	mov	r23, r0
     9b6:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <Current_Temp+0x1>
     9ba:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Current_Temp>
		
		HAL_MAX7221_PUT_NUMBER ( Current_Temp ) ;			/*display Current Temperature at start up*/
     9be:	0e 94 8a 05 	call	0xb14	; 0xb14 <HAL_MAX7221_PUT_NUMBER>
	
	
    while (1) 
	{	
				
		if( Electric_Heater_State )					/*if power is on*/
     9c2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Electric_Heater_State>
     9c6:	88 23       	and	r24, r24
     9c8:	f1 f3       	breq	.-4      	; 0x9c6 <main+0x136>
		{
			
			MCAL_ADC_StartConversionBusyWait( ADC_CHANNEL0 , &Current_Temp );	/*read water temperature*/
     9ca:	62 e7       	ldi	r22, 0x72	; 114
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <MCAL_ADC_StartConversionBusyWait>
			Current_Temp = ( (uint32_t) Current_Temp * 500 ) / 1024 ;
     9d4:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <Current_Temp>
     9d8:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <Current_Temp+0x1>
     9dc:	a4 ef       	ldi	r26, 0xF4	; 244
     9de:	b1 e0       	ldi	r27, 0x01	; 1
     9e0:	0e 94 24 0c 	call	0x1848	; 0x1848 <__umulhisi3>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	07 2e       	mov	r0, r23
     9ea:	7a e0       	ldi	r23, 0x0A	; 10
     9ec:	b6 95       	lsr	r27
     9ee:	a7 95       	ror	r26
     9f0:	97 95       	ror	r25
     9f2:	87 95       	ror	r24
     9f4:	7a 95       	dec	r23
     9f6:	d1 f7       	brne	.-12     	; 0x9ec <main+0x15c>
     9f8:	70 2d       	mov	r23, r0
     9fa:	9c 01       	movw	r18, r24
     9fc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <Current_Temp+0x1>
     a00:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Current_Temp>
	
			/*Choose Heating or Cooling*/
			if( Current_Temp < Set_Temp )			/*turn on heating*/
     a04:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Set_Temp>
     a08:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Set_Temp+0x1>
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	28 f4       	brcc	.+10     	; 0xa1c <main+0x18c>
			{
				Heater_Turn_On();
     a12:	0e 94 ef 03 	call	0x7de	; 0x7de <Heater_Turn_On>
				Cooling_Turn_Off();
     a16:	0e 94 14 04 	call	0x828	; 0x828 <Cooling_Turn_Off>
     a1a:	0f c0       	rjmp	.+30     	; 0xa3a <main+0x1aa>
			}
			else if( Current_Temp > Set_Temp )		/*turn on cooling*/
     a1c:	82 17       	cp	r24, r18
     a1e:	93 07       	cpc	r25, r19
     a20:	28 f4       	brcc	.+10     	; 0xa2c <main+0x19c>
			{
				Heater_Turn_Off();
     a22:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Heater_Turn_Off>
				Cooling_Turn_On();
     a26:	0e 94 04 04 	call	0x808	; 0x808 <Cooling_Turn_On>
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <main+0x1aa>
			}
			else if( Current_Temp == Set_Temp)		/*turn off electric heater*/
     a2c:	28 17       	cp	r18, r24
     a2e:	39 07       	cpc	r19, r25
     a30:	21 f4       	brne	.+8      	; 0xa3a <main+0x1aa>
			{
				Cooling_Turn_Off();
     a32:	0e 94 14 04 	call	0x828	; 0x828 <Cooling_Turn_Off>
				Heater_Turn_Off();
     a36:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Heater_Turn_Off>
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
     a3c:	81 ee       	ldi	r24, 0xE1	; 225
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	21 50       	subi	r18, 0x01	; 1
     a42:	80 40       	sbci	r24, 0x00	; 0
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	e1 f7       	brne	.-8      	; 0xa40 <main+0x1b0>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <main+0x1ba>
     a4a:	00 00       	nop
     a4c:	ba cf       	rjmp	.-140    	; 0x9c2 <main+0x132>

00000a4e <HAL_MAX7221_Init>:
{
	MCAL_SPI_SS_ENABLE(0);
	MCAL_SPI_Transmit(_digit);	/*Digit1*/
	MCAL_SPI_Transmit(_number);	/*number  = 1*/
	MCAL_SPI_SS_DISABLE(0);
}
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
     a56:	8c e0       	ldi	r24, 0x0C	; 12
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
     a76:	8b e0       	ldi	r24, 0x0B	; 11
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
     a96:	89 e0       	ldi	r24, 0x09	; 9
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
     ab6:	8a e0       	ldi	r24, 0x0A	; 10
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     abe:	8f e0       	ldi	r24, 0x0F	; 15
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
     ace:	08 95       	ret

00000ad0 <HAL_MAX7221_DISPLAY_ON>:

void HAL_MAX7221_DISPLAY_ON()
{
	MCAL_SPI_SS_ENABLE(0);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
	MCAL_SPI_Transmit(0x0C);	/*ADDRESS*/
     ad8:	8c e0       	ldi	r24, 0x0C	; 12
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_Transmit(0x01);	/*DATA*/
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_SS_DISABLE(0);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
     af0:	08 95       	ret

00000af2 <HAL_MAX7221_DISPLAY_OFF>:
}

void HAL_MAX7221_DISPLAY_OFF()
{
	MCAL_SPI_SS_ENABLE(0);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
	MCAL_SPI_Transmit(0x0C);	/*ADDRESS*/
     afa:	8c e0       	ldi	r24, 0x0C	; 12
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_Transmit(0x00);	/*DATA*/
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_SS_DISABLE(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
     b12:	08 95       	ret

00000b14 <HAL_MAX7221_PUT_NUMBER>:
}

void HAL_MAX7221_PUT_NUMBER(uint16_t _number)
{
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
	
	if( _number >= 75)
     b1c:	8b 34       	cpi	r24, 0x4B	; 75
     b1e:	91 05       	cpc	r25, r1
     b20:	30 f4       	brcc	.+12     	; 0xb2e <HAL_MAX7221_PUT_NUMBER+0x1a>
     b22:	8c 01       	movw	r16, r24
     b24:	83 97       	sbiw	r24, 0x23	; 35
     b26:	28 f4       	brcc	.+10     	; 0xb32 <HAL_MAX7221_PUT_NUMBER+0x1e>
     b28:	03 e2       	ldi	r16, 0x23	; 35
     b2a:	10 e0       	ldi	r17, 0x00	; 0
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <HAL_MAX7221_PUT_NUMBER+0x1e>
	{
		_number = 75;
     b2e:	0b e4       	ldi	r16, 0x4B	; 75
     b30:	10 e0       	ldi	r17, 0x00	; 0
	{
		_number = 35;
	}
	
	
	MCAL_SPI_SS_ENABLE(0);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
	MCAL_SPI_Transmit(DIG1);	/*Digit1*/
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_Transmit(_number/10);	/*number  = 1*/
     b42:	98 01       	movw	r18, r16
     b44:	ad ec       	ldi	r26, 0xCD	; 205
     b46:	bc ec       	ldi	r27, 0xCC	; 204
     b48:	0e 94 24 0c 	call	0x1848	; 0x1848 <__umulhisi3>
     b4c:	ec 01       	movw	r28, r24
     b4e:	d6 95       	lsr	r29
     b50:	c7 95       	ror	r28
     b52:	d6 95       	lsr	r29
     b54:	c7 95       	ror	r28
     b56:	d6 95       	lsr	r29
     b58:	c7 95       	ror	r28
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_SS_DISABLE(0);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
		
	MCAL_SPI_SS_ENABLE(0);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <MCAL_SPI_SS_ENABLE>
	MCAL_SPI_Transmit(DIG2);	/*Digit1*/
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_Transmit(_number%10);	/*number  = 1*/
     b78:	ce 01       	movw	r24, r28
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	cc 0f       	add	r28, r28
     b80:	dd 1f       	adc	r29, r29
     b82:	cc 0f       	add	r28, r28
     b84:	dd 1f       	adc	r29, r29
     b86:	cc 0f       	add	r28, r28
     b88:	dd 1f       	adc	r29, r29
     b8a:	c8 0f       	add	r28, r24
     b8c:	d9 1f       	adc	r29, r25
     b8e:	c8 01       	movw	r24, r16
     b90:	8c 1b       	sub	r24, r28
     b92:	9d 0b       	sbc	r25, r29
     b94:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MCAL_SPI_Transmit>
	MCAL_SPI_SS_DISABLE(0);
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCAL_SPI_SS_DISABLE>
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <MCAL_SPI_Init>:
	while(GET_BIT(SPSR,SPIF) != 1);
	
	g_data_recieve = SPDR;
	
	return g_data_recieve;
}
     baa:	bd 9a       	sbi	0x17, 5	; 23
     bac:	be 98       	cbi	0x17, 6	; 23
     bae:	bf 9a       	sbi	0x17, 7	; 23
     bb0:	bc 9a       	sbi	0x17, 4	; 23
     bb2:	83 e5       	ldi	r24, 0x53	; 83
     bb4:	8d b9       	out	0x0d, r24	; 13
     bb6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <g_ptr+0x1>
     bba:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <g_ptr>
     bbe:	08 95       	ret

00000bc0 <MCAL_SPI_SS_ENABLE>:
     bc0:	81 11       	cpse	r24, r1
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <MCAL_SPI_SS_ENABLE+0xe>
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	64 e0       	ldi	r22, 0x04	; 4
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     bce:	08 95       	ret

00000bd0 <MCAL_SPI_SS_DISABLE>:
     bd0:	81 11       	cpse	r24, r1
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <MCAL_SPI_SS_DISABLE+0xe>
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	64 e0       	ldi	r22, 0x04	; 4
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
     bde:	08 95       	ret

00000be0 <MCAL_SPI_Transmit>:
     be0:	8f b9       	out	0x0f, r24	; 15
     be2:	77 9b       	sbis	0x0e, 7	; 14
     be4:	fe cf       	rjmp	.-4      	; 0xbe2 <MCAL_SPI_Transmit+0x2>
     be6:	08 95       	ret

00000be8 <__vector_12>:



ISR(SPI_STC_vect){
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
	
#if SPI_MODE == MASTER

	MCAL_DIO_voidSetPinValue(DIO_PORTB , SS , DIO_HIGH);
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	64 e0       	ldi	r22, 0x04	; 4
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	0e 94 bd 01 	call	0x37a	; 0x37a <MCAL_DIO_voidSetPinValue>
	
	g_data_recieve = SPDR;
     c14:	8f b1       	in	r24, 0x0f	; 15
     c16:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <g_data_recieve>
	g_data_recieve = SPDR;

	(*g_ptr)(g_data_recieve);

#endif
}
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <MCAL_TIMER0_WITH_INTERRUPT_Initialization>:
#if WAVE_GENERATION_MODE == NON_INVERTING
	
	OCR0 = ((desired_Duty * BITS) / 100) - 1;
	
#elif WAVE_GENERATION_MODE == INVERTING
	OCR0 = BITS - ((desired_Duty*BITS)/100) - 1;
     c3c:	83 b7       	in	r24, 0x33	; 51
     c3e:	87 7f       	andi	r24, 0xF7	; 247
     c40:	83 bf       	out	0x33, r24	; 51
     c42:	83 b7       	in	r24, 0x33	; 51
     c44:	8f 7b       	andi	r24, 0xBF	; 191
     c46:	83 bf       	out	0x33, r24	; 51
     c48:	89 b7       	in	r24, 0x39	; 57
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	89 bf       	out	0x39, r24	; 57
     c4e:	83 b7       	in	r24, 0x33	; 51
     c50:	84 60       	ori	r24, 0x04	; 4
     c52:	83 bf       	out	0x33, r24	; 51
     c54:	83 b7       	in	r24, 0x33	; 51
     c56:	82 60       	ori	r24, 0x02	; 2
     c58:	83 bf       	out	0x33, r24	; 51
     c5a:	83 b7       	in	r24, 0x33	; 51
     c5c:	81 60       	ori	r24, 0x01	; 1
     c5e:	83 bf       	out	0x33, r24	; 51
     c60:	8f b7       	in	r24, 0x3f	; 63
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	8f bf       	out	0x3f, r24	; 63
     c66:	08 95       	ret

00000c68 <MCAL_TIMER0_WITH_INTERRUPT_Set_Delay>:
     c68:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <Timer0_g_ptr_to_func+0x1>
     c6c:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <Timer0_g_ptr_to_func>
     c70:	a8 ee       	ldi	r26, 0xE8	; 232
     c72:	b3 e0       	ldi	r27, 0x03	; 3
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	0e 94 33 0c 	call	0x1866	; 0x1866 <__muluhisi3>
     c7c:	ab 01       	movw	r20, r22
     c7e:	bc 01       	movw	r22, r24
     c80:	68 94       	set
     c82:	15 f8       	bld	r1, 5
     c84:	76 95       	lsr	r23
     c86:	67 95       	ror	r22
     c88:	57 95       	ror	r21
     c8a:	47 95       	ror	r20
     c8c:	16 94       	lsr	r1
     c8e:	d1 f7       	brne	.-12     	; 0xc84 <MCAL_TIMER0_WITH_INTERRUPT_Set_Delay+0x1c>
     c90:	bb 27       	eor	r27, r27
     c92:	a7 2f       	mov	r26, r23
     c94:	96 2f       	mov	r25, r22
     c96:	85 2f       	mov	r24, r21
     c98:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Timer0_Num_OVF>
     c9c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <Timer0_Num_OVF+0x1>
     ca0:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <Timer0_Num_OVF+0x2>
     ca4:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <Timer0_Num_OVF+0x3>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	a0 e0       	ldi	r26, 0x00	; 0
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	84 1b       	sub	r24, r20
     cb2:	91 09       	sbc	r25, r1
     cb4:	a1 09       	sbc	r26, r1
     cb6:	b1 09       	sbc	r27, r1
     cb8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Timer0_Initial_Value>
     cbc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <Timer0_Initial_Value+0x1>
     cc0:	a0 93 82 00 	sts	0x0082, r26	; 0x800082 <Timer0_Initial_Value+0x2>
     cc4:	b0 93 83 00 	sts	0x0083, r27	; 0x800083 <Timer0_Initial_Value+0x3>
     cc8:	82 bf       	out	0x32, r24	; 50
     cca:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Timer0_Num_OVF>
     cce:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <Timer0_Num_OVF+0x1>
     cd2:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <Timer0_Num_OVF+0x2>
     cd6:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <Timer0_Num_OVF+0x3>
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	a1 1d       	adc	r26, r1
     cde:	b1 1d       	adc	r27, r1
     ce0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Timer0_Num_OVF>
     ce4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <Timer0_Num_OVF+0x1>
     ce8:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <Timer0_Num_OVF+0x2>
     cec:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <Timer0_Num_OVF+0x3>
     cf0:	08 95       	ret

00000cf2 <__vector_11>:
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	ef 93       	push	r30
     d12:	ff 93       	push	r31
     d14:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Timer0_desired_counts.1590>
     d18:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Timer0_desired_counts.1590+0x1>
     d1c:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <Timer0_desired_counts.1590+0x2>
     d20:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <Timer0_desired_counts.1590+0x3>
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	a1 1d       	adc	r26, r1
     d28:	b1 1d       	adc	r27, r1
     d2a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Timer0_desired_counts.1590>
     d2e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <Timer0_desired_counts.1590+0x1>
     d32:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <Timer0_desired_counts.1590+0x2>
     d36:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <Timer0_desired_counts.1590+0x3>
     d3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <Timer0_Num_OVF>
     d3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <Timer0_Num_OVF+0x1>
     d42:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <Timer0_Num_OVF+0x2>
     d46:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <Timer0_Num_OVF+0x3>
     d4a:	84 17       	cp	r24, r20
     d4c:	95 07       	cpc	r25, r21
     d4e:	a6 07       	cpc	r26, r22
     d50:	b7 07       	cpc	r27, r23
     d52:	91 f4       	brne	.+36     	; 0xd78 <__vector_11+0x86>
     d54:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <Timer0_g_ptr_to_func>
     d58:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <Timer0_g_ptr_to_func+0x1>
     d5c:	30 97       	sbiw	r30, 0x00	; 0
     d5e:	61 f0       	breq	.+24     	; 0xd78 <__vector_11+0x86>
     d60:	09 95       	icall
     d62:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Timer0_desired_counts.1590>
     d66:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <Timer0_desired_counts.1590+0x1>
     d6a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <Timer0_desired_counts.1590+0x2>
     d6e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <Timer0_desired_counts.1590+0x3>
     d72:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Timer0_Initial_Value>
     d76:	82 bf       	out	0x32, r24	; 50
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_10>:
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <MCAL_TIMER0_STOP>:
	
}

void MCAL_TIMER0_STOP()
{
	CLR_BIT(TCCR0 , CS00);
     dae:	83 b7       	in	r24, 0x33	; 51
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , CS01);
     db4:	83 b7       	in	r24, 0x33	; 51
     db6:	8d 7f       	andi	r24, 0xFD	; 253
     db8:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , CS02);
     dba:	83 b7       	in	r24, 0x33	; 51
     dbc:	8b 7f       	andi	r24, 0xFB	; 251
     dbe:	83 bf       	out	0x33, r24	; 51
     dc0:	08 95       	ret

00000dc2 <MCAL_TIMER0_RESUME>:
}

void MCAL_TIMER0_RESUME()
{
	#if TIMER0_PRESCALER == PRE_CLK1024       /* choose prescalar */
	TCCR0 = (TCCR0 & 0xF8) | 0x05;			  /* CS12 CS11 CS10   */
     dc2:	83 b7       	in	r24, 0x33	; 51
     dc4:	88 7f       	andi	r24, 0xF8	; 248
     dc6:	85 60       	ori	r24, 0x05	; 5
     dc8:	83 bf       	out	0x33, r24	; 51
     dca:	08 95       	ret

00000dcc <__vector_9>:
	TCCR1B = (TCCR1B & 0xF8) | 0x01;
	#endif
}

ISR(TIMER1_OVF_vect)
{
     dcc:	1f 92       	push	r1
     dce:	0f 92       	push	r0
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	0f 92       	push	r0
     dd4:	11 24       	eor	r1, r1
     dd6:	2f 93       	push	r18
     dd8:	3f 93       	push	r19
     dda:	4f 93       	push	r20
     ddc:	5f 93       	push	r21
     dde:	6f 93       	push	r22
     de0:	7f 93       	push	r23
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	af 93       	push	r26
     de8:	bf 93       	push	r27
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31
#if WAVE_GENERATION_MODE == NORMAL_MODE

	static uint32_t Timer1_desired_counts = 0;
	
	Timer1_desired_counts++;
     dee:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Timer1_desired_counts.1679>
     df2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <Timer1_desired_counts.1679+0x1>
     df6:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <Timer1_desired_counts.1679+0x2>
     dfa:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <Timer1_desired_counts.1679+0x3>
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	a1 1d       	adc	r26, r1
     e02:	b1 1d       	adc	r27, r1
     e04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Timer1_desired_counts.1679>
     e08:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <Timer1_desired_counts.1679+0x1>
     e0c:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <Timer1_desired_counts.1679+0x2>
     e10:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <Timer1_desired_counts.1679+0x3>
	
	if( Timer1_desired_counts == Timer1_g_NumOfOVF && Timer1_g_ptrToFunction != NULL_PTR )
     e14:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <Timer1_g_NumOfOVF>
     e18:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <Timer1_g_NumOfOVF+0x1>
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	84 17       	cp	r24, r20
     e22:	95 07       	cpc	r25, r21
     e24:	a6 07       	cpc	r26, r22
     e26:	b7 07       	cpc	r27, r23
     e28:	a9 f4       	brne	.+42     	; 0xe54 <__vector_9+0x88>
     e2a:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <Timer1_g_ptrToFunction>
     e2e:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <Timer1_g_ptrToFunction+0x1>
     e32:	30 97       	sbiw	r30, 0x00	; 0
     e34:	79 f0       	breq	.+30     	; 0xe54 <__vector_9+0x88>
	{
		(*Timer1_g_ptrToFunction)();
     e36:	09 95       	icall
		
		Timer1_desired_counts = 0;
     e38:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <Timer1_desired_counts.1679>
     e3c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <Timer1_desired_counts.1679+0x1>
     e40:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <Timer1_desired_counts.1679+0x2>
     e44:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Timer1_desired_counts.1679+0x3>
		
		TCNT1 = Timer1_g_InitialValue;
     e48:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Timer1_g_InitialValue>
     e4c:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <Timer1_g_InitialValue+0x1>
     e50:	9d bd       	out	0x2d, r25	; 45
     e52:	8c bd       	out	0x2c, r24	; 44
	}
	
#endif
}
     e54:	ff 91       	pop	r31
     e56:	ef 91       	pop	r30
     e58:	bf 91       	pop	r27
     e5a:	af 91       	pop	r26
     e5c:	9f 91       	pop	r25
     e5e:	8f 91       	pop	r24
     e60:	7f 91       	pop	r23
     e62:	6f 91       	pop	r22
     e64:	5f 91       	pop	r21
     e66:	4f 91       	pop	r20
     e68:	3f 91       	pop	r19
     e6a:	2f 91       	pop	r18
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti

00000e76 <MCAL_TIMER2_WITH_INTERRUPT_Initialization>:
void MCAL_TIMER2_WITH_INTERRUPT_Initialization(void)
{
	
#if WAVE_GENERATION_MODE == NORMAL_MODE
	
	CLR_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     e76:	85 b5       	in	r24, 0x25	; 37
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	85 bd       	out	0x25, r24	; 37
     e7c:	85 b5       	in	r24, 0x25	; 37
     e7e:	8f 7b       	andi	r24, 0xBF	; 191
     e80:	85 bd       	out	0x25, r24	; 37
	
	/*Enable OverFlow Local Interrupt*/
	SET_BIT(TIMSK, TOIE2);
     e82:	89 b7       	in	r24, 0x39	; 57
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TIMSK, OCIE2);
	
#endif
	
	/*Prescalar set to 1024*/
	SET_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e88:	85 b5       	in	r24, 0x25	; 37
     e8a:	84 60       	ori	r24, 0x04	; 4
     e8c:	85 bd       	out	0x25, r24	; 37
     e8e:	85 b5       	in	r24, 0x25	; 37
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	85 bd       	out	0x25, r24	; 37
     e94:	85 b5       	in	r24, 0x25	; 37
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	85 bd       	out	0x25, r24	; 37
	
	/*Enable Global Interrupt*/
	SET_BIT(SREG,7);
     e9a:	8f b7       	in	r24, 0x3f	; 63
     e9c:	80 68       	ori	r24, 0x80	; 128
     e9e:	8f bf       	out	0x3f, r24	; 63
     ea0:	08 95       	ret

00000ea2 <MCAL_TIMER2_WITH_INTERRUPT_Set_Delay>:
}

void MCAL_TIMER2_WITH_INTERRUPT_Set_Delay(uint32_t Delay, uint8_t ocr , void (*ptr_to_func)(void))
{
	
	Timer2_g_ptr_to_func = ptr_to_func;	//set user's function as ISR
     ea2:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <Timer2_g_ptr_to_func+0x1>
     ea6:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <Timer2_g_ptr_to_func>
	
#if WAVE_GENERATION_MODE == NORMAL_MODE
	
	uint8_t Tick = PRESCALER / F_OSC;
	uint32_t Counts = (Delay * MISECOND) / Tick;
     eaa:	a8 ee       	ldi	r26, 0xE8	; 232
     eac:	b3 e0       	ldi	r27, 0x03	; 3
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	0e 94 33 0c 	call	0x1866	; 0x1866 <__muluhisi3>
     eb6:	ab 01       	movw	r20, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	68 94       	set
     ebc:	15 f8       	bld	r1, 5
     ebe:	76 95       	lsr	r23
     ec0:	67 95       	ror	r22
     ec2:	57 95       	ror	r21
     ec4:	47 95       	ror	r20
     ec6:	16 94       	lsr	r1
     ec8:	d1 f7       	brne	.-12     	; 0xebe <MCAL_TIMER2_WITH_INTERRUPT_Set_Delay+0x1c>
	TIMER2_Num_OVF_ = Counts / BITS;
     eca:	bb 27       	eor	r27, r27
     ecc:	a7 2f       	mov	r26, r23
     ece:	96 2f       	mov	r25, r22
     ed0:	85 2f       	mov	r24, r21
     ed2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <TIMER2_Num_OVF_>
     ed6:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <TIMER2_Num_OVF_+0x1>
     eda:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <TIMER2_Num_OVF_+0x2>
     ede:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <TIMER2_Num_OVF_+0x3>
	TIMER2_Initial_Value = BITS - (Counts % BITS); //compensate counting the decimal value by pre-loading
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	a0 e0       	ldi	r26, 0x00	; 0
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	84 1b       	sub	r24, r20
     eec:	91 09       	sbc	r25, r1
     eee:	a1 09       	sbc	r26, r1
     ef0:	b1 09       	sbc	r27, r1
     ef2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <TIMER2_Initial_Value>
     ef6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <TIMER2_Initial_Value+0x1>
     efa:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <TIMER2_Initial_Value+0x2>
     efe:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <TIMER2_Initial_Value+0x3>
	TCNT2 = TIMER2_Initial_Value; // set data register to initial value
     f02:	84 bd       	out	0x24, r24	; 36
	TIMER2_Num_OVF_++; // must increased by one because the decimal value
     f04:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <TIMER2_Num_OVF_>
     f08:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <TIMER2_Num_OVF_+0x1>
     f0c:	a0 91 9e 00 	lds	r26, 0x009E	; 0x80009e <TIMER2_Num_OVF_+0x2>
     f10:	b0 91 9f 00 	lds	r27, 0x009F	; 0x80009f <TIMER2_Num_OVF_+0x3>
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	a1 1d       	adc	r26, r1
     f18:	b1 1d       	adc	r27, r1
     f1a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <TIMER2_Num_OVF_>
     f1e:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <TIMER2_Num_OVF_+0x1>
     f22:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <TIMER2_Num_OVF_+0x2>
     f26:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <TIMER2_Num_OVF_+0x3>
     f2a:	08 95       	ret

00000f2c <__vector_5>:
	
#endif
}

ISR(TIMER2_OVF_vect)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
#if WAVE_GENERATION_MODE == NORMAL_MODE

	static uint32_t Timer2_desired_counts = 0;
	
	Timer2_desired_counts++;
     f4e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Timer2_desired_counts.1697>
     f52:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <Timer2_desired_counts.1697+0x1>
     f56:	a0 91 94 00 	lds	r26, 0x0094	; 0x800094 <Timer2_desired_counts.1697+0x2>
     f5a:	b0 91 95 00 	lds	r27, 0x0095	; 0x800095 <Timer2_desired_counts.1697+0x3>
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	a1 1d       	adc	r26, r1
     f62:	b1 1d       	adc	r27, r1
     f64:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Timer2_desired_counts.1697>
     f68:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <Timer2_desired_counts.1697+0x1>
     f6c:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <Timer2_desired_counts.1697+0x2>
     f70:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <Timer2_desired_counts.1697+0x3>
	
	if(Timer2_desired_counts == TIMER2_Num_OVF_ && Timer2_g_ptr_to_func != NULL_PTR)
     f74:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <TIMER2_Num_OVF_>
     f78:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <TIMER2_Num_OVF_+0x1>
     f7c:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <TIMER2_Num_OVF_+0x2>
     f80:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <TIMER2_Num_OVF_+0x3>
     f84:	84 17       	cp	r24, r20
     f86:	95 07       	cpc	r25, r21
     f88:	a6 07       	cpc	r26, r22
     f8a:	b7 07       	cpc	r27, r23
     f8c:	91 f4       	brne	.+36     	; 0xfb2 <__vector_5+0x86>
     f8e:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <Timer2_g_ptr_to_func>
     f92:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <Timer2_g_ptr_to_func+0x1>
     f96:	30 97       	sbiw	r30, 0x00	; 0
     f98:	61 f0       	breq	.+24     	; 0xfb2 <__vector_5+0x86>
	{
		(*Timer2_g_ptr_to_func)();
     f9a:	09 95       	icall
		Timer2_desired_counts = 0;
     f9c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <Timer2_desired_counts.1697>
     fa0:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <Timer2_desired_counts.1697+0x1>
     fa4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <Timer2_desired_counts.1697+0x2>
     fa8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <Timer2_desired_counts.1697+0x3>
		TCNT2 = TIMER2_Initial_Value;
     fac:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <TIMER2_Initial_Value>
     fb0:	84 bd       	out	0x24, r24	; 36
	}
	
#endif
}
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <MCAL_TWI_MASTER_Init>:
	
	while((TWSR & 0xF8) != SLAVE_DATA_RECEIVED);
	
	*recievedData = TWDR;
	
	CLR_BIT(TWCR , TWINT);
     fd4:	09 98       	cbi	0x01, 1	; 1
     fd6:	08 98       	cbi	0x01, 0	; 1
     fd8:	61 b1       	in	r22, 0x01	; 1
     fda:	63 70       	andi	r22, 0x03	; 3
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e8       	ldi	r24, 0x80	; 128
     ff0:	90 e4       	ldi	r25, 0x40	; 64
     ff2:	0e 94 2d 0a 	call	0x145a	; 0x145a <pow>
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	48 e1       	ldi	r20, 0x18	; 24
     ffc:	53 e4       	ldi	r21, 0x43	; 67
     ffe:	0e 94 c0 09 	call	0x1380	; 0x1380 <__mulsf3>
    1002:	0e 94 03 09 	call	0x1206	; 0x1206 <__fixunssfsi>
    1006:	60 b9       	out	0x00, r22	; 0
    1008:	86 b7       	in	r24, 0x36	; 54
    100a:	84 60       	ori	r24, 0x04	; 4
    100c:	86 bf       	out	0x36, r24	; 54
    100e:	86 b7       	in	r24, 0x36	; 54
    1010:	8f 77       	andi	r24, 0x7F	; 127
    1012:	86 bf       	out	0x36, r24	; 54
    1014:	08 95       	ret

00001016 <MCAL_TWI_START_Condition>:
    1016:	84 ea       	ldi	r24, 0xA4	; 164
    1018:	86 bf       	out	0x36, r24	; 54
    101a:	06 b6       	in	r0, 0x36	; 54
    101c:	07 fe       	sbrs	r0, 7
    101e:	fd cf       	rjmp	.-6      	; 0x101a <MCAL_TWI_START_Condition+0x4>
    1020:	81 b1       	in	r24, 0x01	; 1
    1022:	88 7f       	andi	r24, 0xF8	; 248
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	e1 f7       	brne	.-8      	; 0x1020 <MCAL_TWI_START_Condition+0xa>
    1028:	86 b7       	in	r24, 0x36	; 54
    102a:	8f 77       	andi	r24, 0x7F	; 127
    102c:	86 bf       	out	0x36, r24	; 54
    102e:	08 95       	ret

00001030 <MCAL_TWI_REPSTART_Condition>:
    1030:	84 ea       	ldi	r24, 0xA4	; 164
    1032:	86 bf       	out	0x36, r24	; 54
    1034:	06 b6       	in	r0, 0x36	; 54
    1036:	07 fe       	sbrs	r0, 7
    1038:	fd cf       	rjmp	.-6      	; 0x1034 <MCAL_TWI_REPSTART_Condition+0x4>
    103a:	81 b1       	in	r24, 0x01	; 1
    103c:	88 7f       	andi	r24, 0xF8	; 248
    103e:	80 31       	cpi	r24, 0x10	; 16
    1040:	e1 f7       	brne	.-8      	; 0x103a <MCAL_TWI_REPSTART_Condition+0xa>
    1042:	86 b7       	in	r24, 0x36	; 54
    1044:	8f 77       	andi	r24, 0x7F	; 127
    1046:	86 bf       	out	0x36, r24	; 54
    1048:	08 95       	ret

0000104a <MCAL_TWI_Master_TRANSMIT_Address>:
    104a:	61 11       	cpse	r22, r1
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <MCAL_TWI_Master_TRANSMIT_Address+0x8>
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <MCAL_TWI_Master_TRANSMIT_Address+0xe>
    1052:	61 30       	cpi	r22, 0x01	; 1
    1054:	09 f4       	brne	.+2      	; 0x1058 <MCAL_TWI_Master_TRANSMIT_Address+0xe>
    1056:	8e 7f       	andi	r24, 0xFE	; 254
    1058:	83 b9       	out	0x03, r24	; 3
    105a:	84 e8       	ldi	r24, 0x84	; 132
    105c:	86 bf       	out	0x36, r24	; 54
    105e:	06 b6       	in	r0, 0x36	; 54
    1060:	07 fe       	sbrs	r0, 7
    1062:	fd cf       	rjmp	.-6      	; 0x105e <MCAL_TWI_Master_TRANSMIT_Address+0x14>
    1064:	61 11       	cpse	r22, r1
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <MCAL_TWI_Master_TRANSMIT_Address+0x28>
    1068:	81 b1       	in	r24, 0x01	; 1
    106a:	88 7f       	andi	r24, 0xF8	; 248
    106c:	80 34       	cpi	r24, 0x40	; 64
    106e:	e1 f7       	brne	.-8      	; 0x1068 <MCAL_TWI_Master_TRANSMIT_Address+0x1e>
    1070:	06 c0       	rjmp	.+12     	; 0x107e <MCAL_TWI_Master_TRANSMIT_Address+0x34>
    1072:	61 30       	cpi	r22, 0x01	; 1
    1074:	21 f4       	brne	.+8      	; 0x107e <MCAL_TWI_Master_TRANSMIT_Address+0x34>
    1076:	81 b1       	in	r24, 0x01	; 1
    1078:	88 7f       	andi	r24, 0xF8	; 248
    107a:	88 31       	cpi	r24, 0x18	; 24
    107c:	e1 f7       	brne	.-8      	; 0x1076 <MCAL_TWI_Master_TRANSMIT_Address+0x2c>
    107e:	86 b7       	in	r24, 0x36	; 54
    1080:	8f 77       	andi	r24, 0x7F	; 127
    1082:	86 bf       	out	0x36, r24	; 54
    1084:	08 95       	ret

00001086 <MCAL_TWI_Master_TRANSMIT_Data>:
    1086:	83 b9       	out	0x03, r24	; 3
    1088:	84 e8       	ldi	r24, 0x84	; 132
    108a:	86 bf       	out	0x36, r24	; 54
    108c:	06 b6       	in	r0, 0x36	; 54
    108e:	07 fe       	sbrs	r0, 7
    1090:	fd cf       	rjmp	.-6      	; 0x108c <MCAL_TWI_Master_TRANSMIT_Data+0x6>
    1092:	81 b1       	in	r24, 0x01	; 1
    1094:	88 7f       	andi	r24, 0xF8	; 248
    1096:	88 32       	cpi	r24, 0x28	; 40
    1098:	e1 f7       	brne	.-8      	; 0x1092 <MCAL_TWI_Master_TRANSMIT_Data+0xc>
    109a:	86 b7       	in	r24, 0x36	; 54
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	86 bf       	out	0x36, r24	; 54
    10a0:	08 95       	ret

000010a2 <MCAL_TWI_STOP_Condition>:
    10a2:	84 e9       	ldi	r24, 0x94	; 148
    10a4:	86 bf       	out	0x36, r24	; 54
    10a6:	86 b7       	in	r24, 0x36	; 54
    10a8:	8f 77       	andi	r24, 0x7F	; 127
    10aa:	86 bf       	out	0x36, r24	; 54
    10ac:	08 95       	ret

000010ae <MCAL_TWI_Master_RECIEVE_Data_ACK>:

}

void MCAL_TWI_Master_RECIEVE_Data_ACK(Uint8t *data)
{
    10ae:	fc 01       	movw	r30, r24
	/*AFTER SLA+R TRANSMITTED*/

	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);	/* SEND ACK */
    10b0:	84 ec       	ldi	r24, 0xC4	; 196
    10b2:	86 bf       	out	0x36, r24	; 54
	
	while(GET_BIT(TWCR, TWINT) != 0);
    10b4:	06 b6       	in	r0, 0x36	; 54
    10b6:	07 fc       	sbrc	r0, 7
    10b8:	fd cf       	rjmp	.-6      	; 0x10b4 <MCAL_TWI_Master_RECIEVE_Data_ACK+0x6>
	
	while((TWSR & 0xF8) != RD_BYTE_ACK);
    10ba:	91 b1       	in	r25, 0x01	; 1
    10bc:	98 7f       	andi	r25, 0xF8	; 248
    10be:	90 35       	cpi	r25, 0x50	; 80
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <MCAL_TWI_Master_RECIEVE_Data_ACK+0xc>
	
	*data= TWDR;
    10c2:	83 b1       	in	r24, 0x03	; 3
    10c4:	80 83       	st	Z, r24
    10c6:	08 95       	ret

000010c8 <MCAL_UART_Init>:
uint8_t MCAL_UART_Receive_Char(void)
{
	while (GET_BIT(UCSRA, RXC) != 1);	/*wait till data recieved*/
	
	return UDR;
}
    10c8:	88 e1       	ldi	r24, 0x18	; 24
    10ca:	8a b9       	out	0x0a, r24	; 10
    10cc:	86 e8       	ldi	r24, 0x86	; 134
    10ce:	80 bd       	out	0x20, r24	; 32
    10d0:	87 e6       	ldi	r24, 0x67	; 103
    10d2:	89 b9       	out	0x09, r24	; 9
    10d4:	10 bc       	out	0x20, r1	; 32
    10d6:	08 95       	ret

000010d8 <__vector_13>:

ISR(USART_RXC_vect)
{
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
	g_recieved_data = UDR;
    10fa:	8c b1       	in	r24, 0x0c	; 12
    10fc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <g_recieved_data>
	
	(*ptr_to_func)(g_recieved_data);
    1100:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <ptr_to_func>
    1104:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <ptr_to_func+0x1>
    1108:	09 95       	icall
	
}
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__subsf3>:
    112c:	50 58       	subi	r21, 0x80	; 128

0000112e <__addsf3>:
    112e:	bb 27       	eor	r27, r27
    1130:	aa 27       	eor	r26, r26
    1132:	0e 94 ae 08 	call	0x115c	; 0x115c <__addsf3x>
    1136:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_round>
    113a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_pscA>
    113e:	38 f0       	brcs	.+14     	; 0x114e <__addsf3+0x20>
    1140:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_pscB>
    1144:	20 f0       	brcs	.+8      	; 0x114e <__addsf3+0x20>
    1146:	39 f4       	brne	.+14     	; 0x1156 <__addsf3+0x28>
    1148:	9f 3f       	cpi	r25, 0xFF	; 255
    114a:	19 f4       	brne	.+6      	; 0x1152 <__addsf3+0x24>
    114c:	26 f4       	brtc	.+8      	; 0x1156 <__addsf3+0x28>
    114e:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_nan>
    1152:	0e f4       	brtc	.+2      	; 0x1156 <__addsf3+0x28>
    1154:	e0 95       	com	r30
    1156:	e7 fb       	bst	r30, 7
    1158:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>

0000115c <__addsf3x>:
    115c:	e9 2f       	mov	r30, r25
    115e:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_split3>
    1162:	58 f3       	brcs	.-42     	; 0x113a <__addsf3+0xc>
    1164:	ba 17       	cp	r27, r26
    1166:	62 07       	cpc	r22, r18
    1168:	73 07       	cpc	r23, r19
    116a:	84 07       	cpc	r24, r20
    116c:	95 07       	cpc	r25, r21
    116e:	20 f0       	brcs	.+8      	; 0x1178 <__addsf3x+0x1c>
    1170:	79 f4       	brne	.+30     	; 0x1190 <__addsf3x+0x34>
    1172:	a6 f5       	brtc	.+104    	; 0x11dc <__addsf3x+0x80>
    1174:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_zero>
    1178:	0e f4       	brtc	.+2      	; 0x117c <__addsf3x+0x20>
    117a:	e0 95       	com	r30
    117c:	0b 2e       	mov	r0, r27
    117e:	ba 2f       	mov	r27, r26
    1180:	a0 2d       	mov	r26, r0
    1182:	0b 01       	movw	r0, r22
    1184:	b9 01       	movw	r22, r18
    1186:	90 01       	movw	r18, r0
    1188:	0c 01       	movw	r0, r24
    118a:	ca 01       	movw	r24, r20
    118c:	a0 01       	movw	r20, r0
    118e:	11 24       	eor	r1, r1
    1190:	ff 27       	eor	r31, r31
    1192:	59 1b       	sub	r21, r25
    1194:	99 f0       	breq	.+38     	; 0x11bc <__addsf3x+0x60>
    1196:	59 3f       	cpi	r21, 0xF9	; 249
    1198:	50 f4       	brcc	.+20     	; 0x11ae <__addsf3x+0x52>
    119a:	50 3e       	cpi	r21, 0xE0	; 224
    119c:	68 f1       	brcs	.+90     	; 0x11f8 <__addsf3x+0x9c>
    119e:	1a 16       	cp	r1, r26
    11a0:	f0 40       	sbci	r31, 0x00	; 0
    11a2:	a2 2f       	mov	r26, r18
    11a4:	23 2f       	mov	r18, r19
    11a6:	34 2f       	mov	r19, r20
    11a8:	44 27       	eor	r20, r20
    11aa:	58 5f       	subi	r21, 0xF8	; 248
    11ac:	f3 cf       	rjmp	.-26     	; 0x1194 <__addsf3x+0x38>
    11ae:	46 95       	lsr	r20
    11b0:	37 95       	ror	r19
    11b2:	27 95       	ror	r18
    11b4:	a7 95       	ror	r26
    11b6:	f0 40       	sbci	r31, 0x00	; 0
    11b8:	53 95       	inc	r21
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__addsf3x+0x52>
    11bc:	7e f4       	brtc	.+30     	; 0x11dc <__addsf3x+0x80>
    11be:	1f 16       	cp	r1, r31
    11c0:	ba 0b       	sbc	r27, r26
    11c2:	62 0b       	sbc	r22, r18
    11c4:	73 0b       	sbc	r23, r19
    11c6:	84 0b       	sbc	r24, r20
    11c8:	ba f0       	brmi	.+46     	; 0x11f8 <__addsf3x+0x9c>
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	a1 f0       	breq	.+40     	; 0x11f6 <__addsf3x+0x9a>
    11ce:	ff 0f       	add	r31, r31
    11d0:	bb 1f       	adc	r27, r27
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	c2 f7       	brpl	.-16     	; 0x11ca <__addsf3x+0x6e>
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <__addsf3x+0x9c>
    11dc:	ba 0f       	add	r27, r26
    11de:	62 1f       	adc	r22, r18
    11e0:	73 1f       	adc	r23, r19
    11e2:	84 1f       	adc	r24, r20
    11e4:	48 f4       	brcc	.+18     	; 0x11f8 <__addsf3x+0x9c>
    11e6:	87 95       	ror	r24
    11e8:	77 95       	ror	r23
    11ea:	67 95       	ror	r22
    11ec:	b7 95       	ror	r27
    11ee:	f7 95       	ror	r31
    11f0:	9e 3f       	cpi	r25, 0xFE	; 254
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <__addsf3x+0x9a>
    11f4:	b0 cf       	rjmp	.-160    	; 0x1156 <__addsf3+0x28>
    11f6:	93 95       	inc	r25
    11f8:	88 0f       	add	r24, r24
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__addsf3x+0xa2>
    11fc:	99 27       	eor	r25, r25
    11fe:	ee 0f       	add	r30, r30
    1200:	97 95       	ror	r25
    1202:	87 95       	ror	r24
    1204:	08 95       	ret

00001206 <__fixunssfsi>:
    1206:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_splitA>
    120a:	88 f0       	brcs	.+34     	; 0x122e <__fixunssfsi+0x28>
    120c:	9f 57       	subi	r25, 0x7F	; 127
    120e:	98 f0       	brcs	.+38     	; 0x1236 <__fixunssfsi+0x30>
    1210:	b9 2f       	mov	r27, r25
    1212:	99 27       	eor	r25, r25
    1214:	b7 51       	subi	r27, 0x17	; 23
    1216:	b0 f0       	brcs	.+44     	; 0x1244 <__fixunssfsi+0x3e>
    1218:	e1 f0       	breq	.+56     	; 0x1252 <__fixunssfsi+0x4c>
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	1a f0       	brmi	.+6      	; 0x122a <__fixunssfsi+0x24>
    1224:	ba 95       	dec	r27
    1226:	c9 f7       	brne	.-14     	; 0x121a <__fixunssfsi+0x14>
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <__fixunssfsi+0x4c>
    122a:	b1 30       	cpi	r27, 0x01	; 1
    122c:	91 f0       	breq	.+36     	; 0x1252 <__fixunssfsi+0x4c>
    122e:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_zero>
    1232:	b1 e0       	ldi	r27, 0x01	; 1
    1234:	08 95       	ret
    1236:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_zero>
    123a:	67 2f       	mov	r22, r23
    123c:	78 2f       	mov	r23, r24
    123e:	88 27       	eor	r24, r24
    1240:	b8 5f       	subi	r27, 0xF8	; 248
    1242:	39 f0       	breq	.+14     	; 0x1252 <__fixunssfsi+0x4c>
    1244:	b9 3f       	cpi	r27, 0xF9	; 249
    1246:	cc f3       	brlt	.-14     	; 0x123a <__fixunssfsi+0x34>
    1248:	86 95       	lsr	r24
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	b3 95       	inc	r27
    1250:	d9 f7       	brne	.-10     	; 0x1248 <__fixunssfsi+0x42>
    1252:	3e f4       	brtc	.+14     	; 0x1262 <__fixunssfsi+0x5c>
    1254:	90 95       	com	r25
    1256:	80 95       	com	r24
    1258:	70 95       	com	r23
    125a:	61 95       	neg	r22
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	08 95       	ret

00001264 <__floatunsisf>:
    1264:	e8 94       	clt
    1266:	09 c0       	rjmp	.+18     	; 0x127a <__floatsisf+0x12>

00001268 <__floatsisf>:
    1268:	97 fb       	bst	r25, 7
    126a:	3e f4       	brtc	.+14     	; 0x127a <__floatsisf+0x12>
    126c:	90 95       	com	r25
    126e:	80 95       	com	r24
    1270:	70 95       	com	r23
    1272:	61 95       	neg	r22
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	99 23       	and	r25, r25
    127c:	a9 f0       	breq	.+42     	; 0x12a8 <__floatsisf+0x40>
    127e:	f9 2f       	mov	r31, r25
    1280:	96 e9       	ldi	r25, 0x96	; 150
    1282:	bb 27       	eor	r27, r27
    1284:	93 95       	inc	r25
    1286:	f6 95       	lsr	r31
    1288:	87 95       	ror	r24
    128a:	77 95       	ror	r23
    128c:	67 95       	ror	r22
    128e:	b7 95       	ror	r27
    1290:	f1 11       	cpse	r31, r1
    1292:	f8 cf       	rjmp	.-16     	; 0x1284 <__floatsisf+0x1c>
    1294:	fa f4       	brpl	.+62     	; 0x12d4 <__floatsisf+0x6c>
    1296:	bb 0f       	add	r27, r27
    1298:	11 f4       	brne	.+4      	; 0x129e <__floatsisf+0x36>
    129a:	60 ff       	sbrs	r22, 0
    129c:	1b c0       	rjmp	.+54     	; 0x12d4 <__floatsisf+0x6c>
    129e:	6f 5f       	subi	r22, 0xFF	; 255
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	8f 4f       	sbci	r24, 0xFF	; 255
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	16 c0       	rjmp	.+44     	; 0x12d4 <__floatsisf+0x6c>
    12a8:	88 23       	and	r24, r24
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <__floatsisf+0x48>
    12ac:	96 e9       	ldi	r25, 0x96	; 150
    12ae:	11 c0       	rjmp	.+34     	; 0x12d2 <__floatsisf+0x6a>
    12b0:	77 23       	and	r23, r23
    12b2:	21 f0       	breq	.+8      	; 0x12bc <__floatsisf+0x54>
    12b4:	9e e8       	ldi	r25, 0x8E	; 142
    12b6:	87 2f       	mov	r24, r23
    12b8:	76 2f       	mov	r23, r22
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <__floatsisf+0x5e>
    12bc:	66 23       	and	r22, r22
    12be:	71 f0       	breq	.+28     	; 0x12dc <__floatsisf+0x74>
    12c0:	96 e8       	ldi	r25, 0x86	; 134
    12c2:	86 2f       	mov	r24, r22
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	2a f0       	brmi	.+10     	; 0x12d4 <__floatsisf+0x6c>
    12ca:	9a 95       	dec	r25
    12cc:	66 0f       	add	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	da f7       	brpl	.-10     	; 0x12ca <__floatsisf+0x62>
    12d4:	88 0f       	add	r24, r24
    12d6:	96 95       	lsr	r25
    12d8:	87 95       	ror	r24
    12da:	97 f9       	bld	r25, 7
    12dc:	08 95       	ret

000012de <__fp_inf>:
    12de:	97 f9       	bld	r25, 7
    12e0:	9f 67       	ori	r25, 0x7F	; 127
    12e2:	80 e8       	ldi	r24, 0x80	; 128
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	08 95       	ret

000012ea <__fp_nan>:
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
    12ec:	80 ec       	ldi	r24, 0xC0	; 192
    12ee:	08 95       	ret

000012f0 <__fp_pscA>:
    12f0:	00 24       	eor	r0, r0
    12f2:	0a 94       	dec	r0
    12f4:	16 16       	cp	r1, r22
    12f6:	17 06       	cpc	r1, r23
    12f8:	18 06       	cpc	r1, r24
    12fa:	09 06       	cpc	r0, r25
    12fc:	08 95       	ret

000012fe <__fp_pscB>:
    12fe:	00 24       	eor	r0, r0
    1300:	0a 94       	dec	r0
    1302:	12 16       	cp	r1, r18
    1304:	13 06       	cpc	r1, r19
    1306:	14 06       	cpc	r1, r20
    1308:	05 06       	cpc	r0, r21
    130a:	08 95       	ret

0000130c <__fp_round>:
    130c:	09 2e       	mov	r0, r25
    130e:	03 94       	inc	r0
    1310:	00 0c       	add	r0, r0
    1312:	11 f4       	brne	.+4      	; 0x1318 <__fp_round+0xc>
    1314:	88 23       	and	r24, r24
    1316:	52 f0       	brmi	.+20     	; 0x132c <__fp_round+0x20>
    1318:	bb 0f       	add	r27, r27
    131a:	40 f4       	brcc	.+16     	; 0x132c <__fp_round+0x20>
    131c:	bf 2b       	or	r27, r31
    131e:	11 f4       	brne	.+4      	; 0x1324 <__fp_round+0x18>
    1320:	60 ff       	sbrs	r22, 0
    1322:	04 c0       	rjmp	.+8      	; 0x132c <__fp_round+0x20>
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	8f 4f       	sbci	r24, 0xFF	; 255
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	08 95       	ret

0000132e <__fp_split3>:
    132e:	57 fd       	sbrc	r21, 7
    1330:	90 58       	subi	r25, 0x80	; 128
    1332:	44 0f       	add	r20, r20
    1334:	55 1f       	adc	r21, r21
    1336:	59 f0       	breq	.+22     	; 0x134e <__fp_splitA+0x10>
    1338:	5f 3f       	cpi	r21, 0xFF	; 255
    133a:	71 f0       	breq	.+28     	; 0x1358 <__fp_splitA+0x1a>
    133c:	47 95       	ror	r20

0000133e <__fp_splitA>:
    133e:	88 0f       	add	r24, r24
    1340:	97 fb       	bst	r25, 7
    1342:	99 1f       	adc	r25, r25
    1344:	61 f0       	breq	.+24     	; 0x135e <__fp_splitA+0x20>
    1346:	9f 3f       	cpi	r25, 0xFF	; 255
    1348:	79 f0       	breq	.+30     	; 0x1368 <__fp_splitA+0x2a>
    134a:	87 95       	ror	r24
    134c:	08 95       	ret
    134e:	12 16       	cp	r1, r18
    1350:	13 06       	cpc	r1, r19
    1352:	14 06       	cpc	r1, r20
    1354:	55 1f       	adc	r21, r21
    1356:	f2 cf       	rjmp	.-28     	; 0x133c <__fp_split3+0xe>
    1358:	46 95       	lsr	r20
    135a:	f1 df       	rcall	.-30     	; 0x133e <__fp_splitA>
    135c:	08 c0       	rjmp	.+16     	; 0x136e <__fp_splitA+0x30>
    135e:	16 16       	cp	r1, r22
    1360:	17 06       	cpc	r1, r23
    1362:	18 06       	cpc	r1, r24
    1364:	99 1f       	adc	r25, r25
    1366:	f1 cf       	rjmp	.-30     	; 0x134a <__fp_splitA+0xc>
    1368:	86 95       	lsr	r24
    136a:	71 05       	cpc	r23, r1
    136c:	61 05       	cpc	r22, r1
    136e:	08 94       	sec
    1370:	08 95       	ret

00001372 <__fp_zero>:
    1372:	e8 94       	clt

00001374 <__fp_szero>:
    1374:	bb 27       	eor	r27, r27
    1376:	66 27       	eor	r22, r22
    1378:	77 27       	eor	r23, r23
    137a:	cb 01       	movw	r24, r22
    137c:	97 f9       	bld	r25, 7
    137e:	08 95       	ret

00001380 <__mulsf3>:
    1380:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__mulsf3x>
    1384:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_round>
    1388:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_pscA>
    138c:	38 f0       	brcs	.+14     	; 0x139c <__mulsf3+0x1c>
    138e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_pscB>
    1392:	20 f0       	brcs	.+8      	; 0x139c <__mulsf3+0x1c>
    1394:	95 23       	and	r25, r21
    1396:	11 f0       	breq	.+4      	; 0x139c <__mulsf3+0x1c>
    1398:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>
    139c:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_nan>
    13a0:	11 24       	eor	r1, r1
    13a2:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_szero>

000013a6 <__mulsf3x>:
    13a6:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_split3>
    13aa:	70 f3       	brcs	.-36     	; 0x1388 <__mulsf3+0x8>

000013ac <__mulsf3_pse>:
    13ac:	95 9f       	mul	r25, r21
    13ae:	c1 f3       	breq	.-16     	; 0x13a0 <__mulsf3+0x20>
    13b0:	95 0f       	add	r25, r21
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	55 1f       	adc	r21, r21
    13b6:	62 9f       	mul	r22, r18
    13b8:	f0 01       	movw	r30, r0
    13ba:	72 9f       	mul	r23, r18
    13bc:	bb 27       	eor	r27, r27
    13be:	f0 0d       	add	r31, r0
    13c0:	b1 1d       	adc	r27, r1
    13c2:	63 9f       	mul	r22, r19
    13c4:	aa 27       	eor	r26, r26
    13c6:	f0 0d       	add	r31, r0
    13c8:	b1 1d       	adc	r27, r1
    13ca:	aa 1f       	adc	r26, r26
    13cc:	64 9f       	mul	r22, r20
    13ce:	66 27       	eor	r22, r22
    13d0:	b0 0d       	add	r27, r0
    13d2:	a1 1d       	adc	r26, r1
    13d4:	66 1f       	adc	r22, r22
    13d6:	82 9f       	mul	r24, r18
    13d8:	22 27       	eor	r18, r18
    13da:	b0 0d       	add	r27, r0
    13dc:	a1 1d       	adc	r26, r1
    13de:	62 1f       	adc	r22, r18
    13e0:	73 9f       	mul	r23, r19
    13e2:	b0 0d       	add	r27, r0
    13e4:	a1 1d       	adc	r26, r1
    13e6:	62 1f       	adc	r22, r18
    13e8:	83 9f       	mul	r24, r19
    13ea:	a0 0d       	add	r26, r0
    13ec:	61 1d       	adc	r22, r1
    13ee:	22 1f       	adc	r18, r18
    13f0:	74 9f       	mul	r23, r20
    13f2:	33 27       	eor	r19, r19
    13f4:	a0 0d       	add	r26, r0
    13f6:	61 1d       	adc	r22, r1
    13f8:	23 1f       	adc	r18, r19
    13fa:	84 9f       	mul	r24, r20
    13fc:	60 0d       	add	r22, r0
    13fe:	21 1d       	adc	r18, r1
    1400:	82 2f       	mov	r24, r18
    1402:	76 2f       	mov	r23, r22
    1404:	6a 2f       	mov	r22, r26
    1406:	11 24       	eor	r1, r1
    1408:	9f 57       	subi	r25, 0x7F	; 127
    140a:	50 40       	sbci	r21, 0x00	; 0
    140c:	9a f0       	brmi	.+38     	; 0x1434 <__mulsf3_pse+0x88>
    140e:	f1 f0       	breq	.+60     	; 0x144c <__mulsf3_pse+0xa0>
    1410:	88 23       	and	r24, r24
    1412:	4a f0       	brmi	.+18     	; 0x1426 <__mulsf3_pse+0x7a>
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	bb 1f       	adc	r27, r27
    141a:	66 1f       	adc	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	91 50       	subi	r25, 0x01	; 1
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	a9 f7       	brne	.-22     	; 0x1410 <__mulsf3_pse+0x64>
    1426:	9e 3f       	cpi	r25, 0xFE	; 254
    1428:	51 05       	cpc	r21, r1
    142a:	80 f0       	brcs	.+32     	; 0x144c <__mulsf3_pse+0xa0>
    142c:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>
    1430:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_szero>
    1434:	5f 3f       	cpi	r21, 0xFF	; 255
    1436:	e4 f3       	brlt	.-8      	; 0x1430 <__mulsf3_pse+0x84>
    1438:	98 3e       	cpi	r25, 0xE8	; 232
    143a:	d4 f3       	brlt	.-12     	; 0x1430 <__mulsf3_pse+0x84>
    143c:	86 95       	lsr	r24
    143e:	77 95       	ror	r23
    1440:	67 95       	ror	r22
    1442:	b7 95       	ror	r27
    1444:	f7 95       	ror	r31
    1446:	e7 95       	ror	r30
    1448:	9f 5f       	subi	r25, 0xFF	; 255
    144a:	c1 f7       	brne	.-16     	; 0x143c <__mulsf3_pse+0x90>
    144c:	fe 2b       	or	r31, r30
    144e:	88 0f       	add	r24, r24
    1450:	91 1d       	adc	r25, r1
    1452:	96 95       	lsr	r25
    1454:	87 95       	ror	r24
    1456:	97 f9       	bld	r25, 7
    1458:	08 95       	ret

0000145a <pow>:
    145a:	fa 01       	movw	r30, r20
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	30 96       	adiw	r30, 0x00	; 0
    1462:	21 05       	cpc	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	a1 f1       	breq	.+104    	; 0x14d0 <pow+0x76>
    1468:	61 15       	cp	r22, r1
    146a:	71 05       	cpc	r23, r1
    146c:	61 f4       	brne	.+24     	; 0x1486 <pow+0x2c>
    146e:	80 38       	cpi	r24, 0x80	; 128
    1470:	bf e3       	ldi	r27, 0x3F	; 63
    1472:	9b 07       	cpc	r25, r27
    1474:	49 f1       	breq	.+82     	; 0x14c8 <pow+0x6e>
    1476:	68 94       	set
    1478:	90 38       	cpi	r25, 0x80	; 128
    147a:	81 05       	cpc	r24, r1
    147c:	61 f0       	breq	.+24     	; 0x1496 <pow+0x3c>
    147e:	80 38       	cpi	r24, 0x80	; 128
    1480:	bf ef       	ldi	r27, 0xFF	; 255
    1482:	9b 07       	cpc	r25, r27
    1484:	41 f0       	breq	.+16     	; 0x1496 <pow+0x3c>
    1486:	99 23       	and	r25, r25
    1488:	4a f5       	brpl	.+82     	; 0x14dc <pow+0x82>
    148a:	ff 3f       	cpi	r31, 0xFF	; 255
    148c:	e1 05       	cpc	r30, r1
    148e:	31 05       	cpc	r19, r1
    1490:	21 05       	cpc	r18, r1
    1492:	19 f1       	breq	.+70     	; 0x14da <pow+0x80>
    1494:	e8 94       	clt
    1496:	08 94       	sec
    1498:	e7 95       	ror	r30
    149a:	d9 01       	movw	r26, r18
    149c:	aa 23       	and	r26, r26
    149e:	29 f4       	brne	.+10     	; 0x14aa <pow+0x50>
    14a0:	ab 2f       	mov	r26, r27
    14a2:	be 2f       	mov	r27, r30
    14a4:	f8 5f       	subi	r31, 0xF8	; 248
    14a6:	d0 f3       	brcs	.-12     	; 0x149c <pow+0x42>
    14a8:	10 c0       	rjmp	.+32     	; 0x14ca <pow+0x70>
    14aa:	ff 5f       	subi	r31, 0xFF	; 255
    14ac:	70 f4       	brcc	.+28     	; 0x14ca <pow+0x70>
    14ae:	a6 95       	lsr	r26
    14b0:	e0 f7       	brcc	.-8      	; 0x14aa <pow+0x50>
    14b2:	f7 39       	cpi	r31, 0x97	; 151
    14b4:	50 f0       	brcs	.+20     	; 0x14ca <pow+0x70>
    14b6:	19 f0       	breq	.+6      	; 0x14be <pow+0x64>
    14b8:	ff 3a       	cpi	r31, 0xAF	; 175
    14ba:	38 f4       	brcc	.+14     	; 0x14ca <pow+0x70>
    14bc:	9f 77       	andi	r25, 0x7F	; 127
    14be:	9f 93       	push	r25
    14c0:	0d d0       	rcall	.+26     	; 0x14dc <pow+0x82>
    14c2:	0f 90       	pop	r0
    14c4:	07 fc       	sbrc	r0, 7
    14c6:	90 58       	subi	r25, 0x80	; 128
    14c8:	08 95       	ret
    14ca:	46 f0       	brts	.+16     	; 0x14dc <pow+0x82>
    14cc:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_nan>
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	80 e8       	ldi	r24, 0x80	; 128
    14d6:	9f e3       	ldi	r25, 0x3F	; 63
    14d8:	08 95       	ret
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	9f 77       	andi	r25, 0x7F	; 127
    14de:	5f 93       	push	r21
    14e0:	4f 93       	push	r20
    14e2:	3f 93       	push	r19
    14e4:	2f 93       	push	r18
    14e6:	0e 94 28 0b 	call	0x1650	; 0x1650 <log>
    14ea:	2f 91       	pop	r18
    14ec:	3f 91       	pop	r19
    14ee:	4f 91       	pop	r20
    14f0:	5f 91       	pop	r21
    14f2:	0e 94 c0 09 	call	0x1380	; 0x1380 <__mulsf3>
    14f6:	0c 94 85 0a 	jmp	0x150a	; 0x150a <exp>
    14fa:	29 f4       	brne	.+10     	; 0x1506 <pow+0xac>
    14fc:	16 f0       	brts	.+4      	; 0x1502 <pow+0xa8>
    14fe:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>
    1502:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_zero>
    1506:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_nan>

0000150a <exp>:
    150a:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_splitA>
    150e:	a8 f3       	brcs	.-22     	; 0x14fa <pow+0xa0>
    1510:	96 38       	cpi	r25, 0x86	; 134
    1512:	a0 f7       	brcc	.-24     	; 0x14fc <pow+0xa2>
    1514:	07 f8       	bld	r0, 7
    1516:	0f 92       	push	r0
    1518:	e8 94       	clt
    151a:	2b e3       	ldi	r18, 0x3B	; 59
    151c:	3a ea       	ldi	r19, 0xAA	; 170
    151e:	48 eb       	ldi	r20, 0xB8	; 184
    1520:	5f e7       	ldi	r21, 0x7F	; 127
    1522:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__mulsf3_pse>
    1526:	0f 92       	push	r0
    1528:	0f 92       	push	r0
    152a:	0f 92       	push	r0
    152c:	4d b7       	in	r20, 0x3d	; 61
    152e:	5e b7       	in	r21, 0x3e	; 62
    1530:	0f 92       	push	r0
    1532:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <modf>
    1536:	e4 e5       	ldi	r30, 0x54	; 84
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_powser>
    153e:	4f 91       	pop	r20
    1540:	5f 91       	pop	r21
    1542:	ef 91       	pop	r30
    1544:	ff 91       	pop	r31
    1546:	e5 95       	asr	r30
    1548:	ee 1f       	adc	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	49 f0       	breq	.+18     	; 0x1560 <exp+0x56>
    154e:	fe 57       	subi	r31, 0x7E	; 126
    1550:	e0 68       	ori	r30, 0x80	; 128
    1552:	44 27       	eor	r20, r20
    1554:	ee 0f       	add	r30, r30
    1556:	44 1f       	adc	r20, r20
    1558:	fa 95       	dec	r31
    155a:	e1 f7       	brne	.-8      	; 0x1554 <exp+0x4a>
    155c:	41 95       	neg	r20
    155e:	55 0b       	sbc	r21, r21
    1560:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <ldexp>
    1564:	0f 90       	pop	r0
    1566:	07 fe       	sbrs	r0, 7
    1568:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <inverse>
    156c:	08 95       	ret

0000156e <__fp_powser>:
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	1f 93       	push	r17
    1574:	0f 93       	push	r16
    1576:	ff 92       	push	r15
    1578:	ef 92       	push	r14
    157a:	df 92       	push	r13
    157c:	7b 01       	movw	r14, r22
    157e:	8c 01       	movw	r16, r24
    1580:	68 94       	set
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <__fp_powser+0x22>
    1584:	da 2e       	mov	r13, r26
    1586:	ef 01       	movw	r28, r30
    1588:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__mulsf3x>
    158c:	fe 01       	movw	r30, r28
    158e:	e8 94       	clt
    1590:	a5 91       	lpm	r26, Z+
    1592:	25 91       	lpm	r18, Z+
    1594:	35 91       	lpm	r19, Z+
    1596:	45 91       	lpm	r20, Z+
    1598:	55 91       	lpm	r21, Z+
    159a:	a6 f3       	brts	.-24     	; 0x1584 <__fp_powser+0x16>
    159c:	ef 01       	movw	r28, r30
    159e:	0e 94 ae 08 	call	0x115c	; 0x115c <__addsf3x>
    15a2:	fe 01       	movw	r30, r28
    15a4:	97 01       	movw	r18, r14
    15a6:	a8 01       	movw	r20, r16
    15a8:	da 94       	dec	r13
    15aa:	69 f7       	brne	.-38     	; 0x1586 <__fp_powser+0x18>
    15ac:	df 90       	pop	r13
    15ae:	ef 90       	pop	r14
    15b0:	ff 90       	pop	r15
    15b2:	0f 91       	pop	r16
    15b4:	1f 91       	pop	r17
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <inverse>:
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	9f e3       	ldi	r25, 0x3F	; 63
    15c8:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__divsf3>
    15cc:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>
    15d0:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_mpack>

000015d4 <ldexp>:
    15d4:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_splitA>
    15d8:	d8 f3       	brcs	.-10     	; 0x15d0 <inverse+0x14>
    15da:	99 23       	and	r25, r25
    15dc:	c9 f3       	breq	.-14     	; 0x15d0 <inverse+0x14>
    15de:	94 0f       	add	r25, r20
    15e0:	51 1d       	adc	r21, r1
    15e2:	a3 f3       	brvs	.-24     	; 0x15cc <inverse+0x10>
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	50 40       	sbci	r21, 0x00	; 0
    15e8:	94 f0       	brlt	.+36     	; 0x160e <ldexp+0x3a>
    15ea:	59 f0       	breq	.+22     	; 0x1602 <ldexp+0x2e>
    15ec:	88 23       	and	r24, r24
    15ee:	32 f0       	brmi	.+12     	; 0x15fc <ldexp+0x28>
    15f0:	66 0f       	add	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	88 1f       	adc	r24, r24
    15f6:	91 50       	subi	r25, 0x01	; 1
    15f8:	50 40       	sbci	r21, 0x00	; 0
    15fa:	c1 f7       	brne	.-16     	; 0x15ec <ldexp+0x18>
    15fc:	9e 3f       	cpi	r25, 0xFE	; 254
    15fe:	51 05       	cpc	r21, r1
    1600:	2c f7       	brge	.-54     	; 0x15cc <inverse+0x10>
    1602:	88 0f       	add	r24, r24
    1604:	91 1d       	adc	r25, r1
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	97 f9       	bld	r25, 7
    160c:	08 95       	ret
    160e:	5f 3f       	cpi	r21, 0xFF	; 255
    1610:	ac f0       	brlt	.+42     	; 0x163c <ldexp+0x68>
    1612:	98 3e       	cpi	r25, 0xE8	; 232
    1614:	9c f0       	brlt	.+38     	; 0x163c <ldexp+0x68>
    1616:	bb 27       	eor	r27, r27
    1618:	86 95       	lsr	r24
    161a:	77 95       	ror	r23
    161c:	67 95       	ror	r22
    161e:	b7 95       	ror	r27
    1620:	08 f4       	brcc	.+2      	; 0x1624 <ldexp+0x50>
    1622:	b1 60       	ori	r27, 0x01	; 1
    1624:	93 95       	inc	r25
    1626:	c1 f7       	brne	.-16     	; 0x1618 <ldexp+0x44>
    1628:	bb 0f       	add	r27, r27
    162a:	58 f7       	brcc	.-42     	; 0x1602 <ldexp+0x2e>
    162c:	11 f4       	brne	.+4      	; 0x1632 <ldexp+0x5e>
    162e:	60 ff       	sbrs	r22, 0
    1630:	e8 cf       	rjmp	.-48     	; 0x1602 <ldexp+0x2e>
    1632:	6f 5f       	subi	r22, 0xFF	; 255
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	8f 4f       	sbci	r24, 0xFF	; 255
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	e3 cf       	rjmp	.-58     	; 0x1602 <ldexp+0x2e>
    163c:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_szero>
    1640:	16 f0       	brts	.+4      	; 0x1646 <ldexp+0x72>
    1642:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_mpack>
    1646:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_nan>
    164a:	68 94       	set
    164c:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>

00001650 <log>:
    1650:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_splitA>
    1654:	a8 f3       	brcs	.-22     	; 0x1640 <ldexp+0x6c>
    1656:	99 23       	and	r25, r25
    1658:	c1 f3       	breq	.-16     	; 0x164a <ldexp+0x76>
    165a:	ae f3       	brts	.-22     	; 0x1646 <ldexp+0x72>
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	1f 93       	push	r17
    1662:	0f 93       	push	r16
    1664:	ff 92       	push	r15
    1666:	c9 2f       	mov	r28, r25
    1668:	dd 27       	eor	r29, r29
    166a:	88 23       	and	r24, r24
    166c:	2a f0       	brmi	.+10     	; 0x1678 <log+0x28>
    166e:	21 97       	sbiw	r28, 0x01	; 1
    1670:	66 0f       	add	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	da f7       	brpl	.-10     	; 0x166e <log+0x1e>
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f eb       	ldi	r21, 0xBF	; 191
    1680:	9f e3       	ldi	r25, 0x3F	; 63
    1682:	88 39       	cpi	r24, 0x98	; 152
    1684:	20 f0       	brcs	.+8      	; 0x168e <log+0x3e>
    1686:	80 3e       	cpi	r24, 0xE0	; 224
    1688:	38 f0       	brcs	.+14     	; 0x1698 <log+0x48>
    168a:	21 96       	adiw	r28, 0x01	; 1
    168c:	8f 77       	andi	r24, 0x7F	; 127
    168e:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
    1692:	ec e7       	ldi	r30, 0x7C	; 124
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <log+0x50>
    1698:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
    169c:	e9 ea       	ldi	r30, 0xA9	; 169
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_powser>
    16a4:	8b 01       	movw	r16, r22
    16a6:	be 01       	movw	r22, r28
    16a8:	ec 01       	movw	r28, r24
    16aa:	fb 2e       	mov	r15, r27
    16ac:	6f 57       	subi	r22, 0x7F	; 127
    16ae:	71 09       	sbc	r23, r1
    16b0:	75 95       	asr	r23
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 0b       	sbc	r24, r24
    16b6:	99 0b       	sbc	r25, r25
    16b8:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
    16bc:	28 e1       	ldi	r18, 0x18	; 24
    16be:	32 e7       	ldi	r19, 0x72	; 114
    16c0:	41 e3       	ldi	r20, 0x31	; 49
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__mulsf3x>
    16c8:	af 2d       	mov	r26, r15
    16ca:	98 01       	movw	r18, r16
    16cc:	ae 01       	movw	r20, r28
    16ce:	ff 90       	pop	r15
    16d0:	0f 91       	pop	r16
    16d2:	1f 91       	pop	r17
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	0e 94 ae 08 	call	0x115c	; 0x115c <__addsf3x>
    16dc:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_round>

000016e0 <modf>:
    16e0:	fa 01       	movw	r30, r20
    16e2:	dc 01       	movw	r26, r24
    16e4:	aa 0f       	add	r26, r26
    16e6:	bb 1f       	adc	r27, r27
    16e8:	9b 01       	movw	r18, r22
    16ea:	ac 01       	movw	r20, r24
    16ec:	bf 57       	subi	r27, 0x7F	; 127
    16ee:	28 f4       	brcc	.+10     	; 0x16fa <modf+0x1a>
    16f0:	22 27       	eor	r18, r18
    16f2:	33 27       	eor	r19, r19
    16f4:	44 27       	eor	r20, r20
    16f6:	50 78       	andi	r21, 0x80	; 128
    16f8:	20 c0       	rjmp	.+64     	; 0x173a <modf+0x5a>
    16fa:	b7 51       	subi	r27, 0x17	; 23
    16fc:	90 f4       	brcc	.+36     	; 0x1722 <modf+0x42>
    16fe:	ab 2f       	mov	r26, r27
    1700:	00 24       	eor	r0, r0
    1702:	46 95       	lsr	r20
    1704:	37 95       	ror	r19
    1706:	27 95       	ror	r18
    1708:	01 1c       	adc	r0, r1
    170a:	a3 95       	inc	r26
    170c:	d2 f3       	brmi	.-12     	; 0x1702 <modf+0x22>
    170e:	00 20       	and	r0, r0
    1710:	71 f0       	breq	.+28     	; 0x172e <modf+0x4e>
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	44 1f       	adc	r20, r20
    1718:	b3 95       	inc	r27
    171a:	da f3       	brmi	.-10     	; 0x1712 <modf+0x32>
    171c:	0e d0       	rcall	.+28     	; 0x173a <modf+0x5a>
    171e:	0c 94 96 08 	jmp	0x112c	; 0x112c <__subsf3>
    1722:	61 30       	cpi	r22, 0x01	; 1
    1724:	71 05       	cpc	r23, r1
    1726:	a0 e8       	ldi	r26, 0x80	; 128
    1728:	8a 07       	cpc	r24, r26
    172a:	b9 46       	sbci	r27, 0x69	; 105
    172c:	30 f4       	brcc	.+12     	; 0x173a <modf+0x5a>
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	66 27       	eor	r22, r22
    1734:	77 27       	eor	r23, r23
    1736:	88 27       	eor	r24, r24
    1738:	90 78       	andi	r25, 0x80	; 128
    173a:	30 96       	adiw	r30, 0x00	; 0
    173c:	21 f0       	breq	.+8      	; 0x1746 <modf+0x66>
    173e:	20 83       	st	Z, r18
    1740:	31 83       	std	Z+1, r19	; 0x01
    1742:	42 83       	std	Z+2, r20	; 0x02
    1744:	53 83       	std	Z+3, r21	; 0x03
    1746:	08 95       	ret

00001748 <__divsf3>:
    1748:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__divsf3x>
    174c:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_round>
    1750:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_pscB>
    1754:	58 f0       	brcs	.+22     	; 0x176c <__divsf3+0x24>
    1756:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_pscA>
    175a:	40 f0       	brcs	.+16     	; 0x176c <__divsf3+0x24>
    175c:	29 f4       	brne	.+10     	; 0x1768 <__divsf3+0x20>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	29 f0       	breq	.+10     	; 0x176c <__divsf3+0x24>
    1762:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>
    1766:	51 11       	cpse	r21, r1
    1768:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_szero>
    176c:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_nan>

00001770 <__divsf3x>:
    1770:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_split3>
    1774:	68 f3       	brcs	.-38     	; 0x1750 <__divsf3+0x8>

00001776 <__divsf3_pse>:
    1776:	99 23       	and	r25, r25
    1778:	b1 f3       	breq	.-20     	; 0x1766 <__divsf3+0x1e>
    177a:	55 23       	and	r21, r21
    177c:	91 f3       	breq	.-28     	; 0x1762 <__divsf3+0x1a>
    177e:	95 1b       	sub	r25, r21
    1780:	55 0b       	sbc	r21, r21
    1782:	bb 27       	eor	r27, r27
    1784:	aa 27       	eor	r26, r26
    1786:	62 17       	cp	r22, r18
    1788:	73 07       	cpc	r23, r19
    178a:	84 07       	cpc	r24, r20
    178c:	38 f0       	brcs	.+14     	; 0x179c <__divsf3_pse+0x26>
    178e:	9f 5f       	subi	r25, 0xFF	; 255
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	44 1f       	adc	r20, r20
    1798:	aa 1f       	adc	r26, r26
    179a:	a9 f3       	breq	.-22     	; 0x1786 <__divsf3_pse+0x10>
    179c:	35 d0       	rcall	.+106    	; 0x1808 <__divsf3_pse+0x92>
    179e:	0e 2e       	mov	r0, r30
    17a0:	3a f0       	brmi	.+14     	; 0x17b0 <__divsf3_pse+0x3a>
    17a2:	e0 e8       	ldi	r30, 0x80	; 128
    17a4:	32 d0       	rcall	.+100    	; 0x180a <__divsf3_pse+0x94>
    17a6:	91 50       	subi	r25, 0x01	; 1
    17a8:	50 40       	sbci	r21, 0x00	; 0
    17aa:	e6 95       	lsr	r30
    17ac:	00 1c       	adc	r0, r0
    17ae:	ca f7       	brpl	.-14     	; 0x17a2 <__divsf3_pse+0x2c>
    17b0:	2b d0       	rcall	.+86     	; 0x1808 <__divsf3_pse+0x92>
    17b2:	fe 2f       	mov	r31, r30
    17b4:	29 d0       	rcall	.+82     	; 0x1808 <__divsf3_pse+0x92>
    17b6:	66 0f       	add	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	bb 1f       	adc	r27, r27
    17be:	26 17       	cp	r18, r22
    17c0:	37 07       	cpc	r19, r23
    17c2:	48 07       	cpc	r20, r24
    17c4:	ab 07       	cpc	r26, r27
    17c6:	b0 e8       	ldi	r27, 0x80	; 128
    17c8:	09 f0       	breq	.+2      	; 0x17cc <__divsf3_pse+0x56>
    17ca:	bb 0b       	sbc	r27, r27
    17cc:	80 2d       	mov	r24, r0
    17ce:	bf 01       	movw	r22, r30
    17d0:	ff 27       	eor	r31, r31
    17d2:	93 58       	subi	r25, 0x83	; 131
    17d4:	5f 4f       	sbci	r21, 0xFF	; 255
    17d6:	3a f0       	brmi	.+14     	; 0x17e6 <__divsf3_pse+0x70>
    17d8:	9e 3f       	cpi	r25, 0xFE	; 254
    17da:	51 05       	cpc	r21, r1
    17dc:	78 f0       	brcs	.+30     	; 0x17fc <__divsf3_pse+0x86>
    17de:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_inf>
    17e2:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_szero>
    17e6:	5f 3f       	cpi	r21, 0xFF	; 255
    17e8:	e4 f3       	brlt	.-8      	; 0x17e2 <__divsf3_pse+0x6c>
    17ea:	98 3e       	cpi	r25, 0xE8	; 232
    17ec:	d4 f3       	brlt	.-12     	; 0x17e2 <__divsf3_pse+0x6c>
    17ee:	86 95       	lsr	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	b7 95       	ror	r27
    17f6:	f7 95       	ror	r31
    17f8:	9f 5f       	subi	r25, 0xFF	; 255
    17fa:	c9 f7       	brne	.-14     	; 0x17ee <__divsf3_pse+0x78>
    17fc:	88 0f       	add	r24, r24
    17fe:	91 1d       	adc	r25, r1
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	97 f9       	bld	r25, 7
    1806:	08 95       	ret
    1808:	e1 e0       	ldi	r30, 0x01	; 1
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	88 1f       	adc	r24, r24
    1810:	bb 1f       	adc	r27, r27
    1812:	62 17       	cp	r22, r18
    1814:	73 07       	cpc	r23, r19
    1816:	84 07       	cpc	r24, r20
    1818:	ba 07       	cpc	r27, r26
    181a:	20 f0       	brcs	.+8      	; 0x1824 <__divsf3_pse+0xae>
    181c:	62 1b       	sub	r22, r18
    181e:	73 0b       	sbc	r23, r19
    1820:	84 0b       	sbc	r24, r20
    1822:	ba 0b       	sbc	r27, r26
    1824:	ee 1f       	adc	r30, r30
    1826:	88 f7       	brcc	.-30     	; 0x180a <__divsf3_pse+0x94>
    1828:	e0 95       	com	r30
    182a:	08 95       	ret

0000182c <__fp_mpack>:
    182c:	9f 3f       	cpi	r25, 0xFF	; 255
    182e:	31 f0       	breq	.+12     	; 0x183c <__fp_mpack_finite+0xc>

00001830 <__fp_mpack_finite>:
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	20 f4       	brcc	.+8      	; 0x183c <__fp_mpack_finite+0xc>
    1834:	87 95       	ror	r24
    1836:	77 95       	ror	r23
    1838:	67 95       	ror	r22
    183a:	b7 95       	ror	r27
    183c:	88 0f       	add	r24, r24
    183e:	91 1d       	adc	r25, r1
    1840:	96 95       	lsr	r25
    1842:	87 95       	ror	r24
    1844:	97 f9       	bld	r25, 7
    1846:	08 95       	ret

00001848 <__umulhisi3>:
    1848:	a2 9f       	mul	r26, r18
    184a:	b0 01       	movw	r22, r0
    184c:	b3 9f       	mul	r27, r19
    184e:	c0 01       	movw	r24, r0
    1850:	a3 9f       	mul	r26, r19
    1852:	70 0d       	add	r23, r0
    1854:	81 1d       	adc	r24, r1
    1856:	11 24       	eor	r1, r1
    1858:	91 1d       	adc	r25, r1
    185a:	b2 9f       	mul	r27, r18
    185c:	70 0d       	add	r23, r0
    185e:	81 1d       	adc	r24, r1
    1860:	11 24       	eor	r1, r1
    1862:	91 1d       	adc	r25, r1
    1864:	08 95       	ret

00001866 <__muluhisi3>:
    1866:	0e 94 24 0c 	call	0x1848	; 0x1848 <__umulhisi3>
    186a:	a5 9f       	mul	r26, r21
    186c:	90 0d       	add	r25, r0
    186e:	b4 9f       	mul	r27, r20
    1870:	90 0d       	add	r25, r0
    1872:	a4 9f       	mul	r26, r20
    1874:	80 0d       	add	r24, r0
    1876:	91 1d       	adc	r25, r1
    1878:	11 24       	eor	r1, r1
    187a:	08 95       	ret

0000187c <_exit>:
    187c:	f8 94       	cli

0000187e <__stop_program>:
    187e:	ff cf       	rjmp	.-2      	; 0x187e <__stop_program>
